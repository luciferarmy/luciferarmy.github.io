<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos7 安装mysql后登录提示：Access denied for user 'root'@'localhost']]></title>
    <url>%2F2018%2F09%2F01%2FCentos7%20%E5%AE%89%E8%A3%85mysql%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;安装mysql后登录提示：ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password:yes) 解决如下： 1.停止mysql服务 &#160; &#160; &#160; &#160;systemctl stop mysqld.service 2.修改配置文件无密码登录 &#160; &#160; &#160; &#160;vim /etc/my.cnf&#160; &#160; &#160; &#160;在最后加上skip-grant-tables,保存 3.启动mysql &#160; &#160; &#160; &#160;systemctl start mysqld.service 4.登录mysql &#160; &#160; &#160; &#160;mysql -u root &#160; &#160; &#160; &#160;注意这里不要加-p 5.修改密码，mysql5.7用此语法 &#160; &#160; &#160; &#160;use mysql; &#160; &#160; &#160; &#160;update mysql.user set authentication_string=password(‘123456’) where user=’root’ ; 6.回到第二部把刚加的那句删掉 &#160; &#160; &#160; &#160;保存，重启mysql就可以了]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据可视化工具]]></title>
    <url>%2F2018%2F08%2F25%2F%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;大数据时代,拥有数据就拥有一切,python作为强大的数据分析利器,在数据分析领域独领风骚,下面介绍一个很好的数据可视化工具. ECharts&#160; &#160; &#160; &#160;Echarts是一个使用 JavaScript实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），提供直观，交互丰富，可高度个性化定制的数据可视化图表。提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap。 特点: 1.基于HTML5的图形库,图形的创建也比较简单，直接引用JS即可 2.百度的项目，而且一直有更新，目前最新的是EChart 4.1.0； 3.项目文档比较详细，而且是中文的，理解比较容易； 4.支持的图形很丰富，并且可以直接切换图形，使用起来非常方便 使用:&#160; &#160; &#160; &#160;官网下载echarts.js引入即可使用. ECharts首页:&#160; &#160; &#160; &#160;http://echarts.baidu.com pyecharts&#160; &#160; &#160; &#160;pyecharts 是一个用于生成 Echarts 图表的Python类库,可以实现在 Python 中直接使用数据生成图表 特点: 1.操作简单使用方便 2.语言翻译扩展pyecharts-javascripthon可以实现将python3.5+代码转换为JS代码 3.支持在Jupyter Notebook,Flask,Django平台中使用 (目前最新版本0.5.8) 使用:&#160; &#160; &#160; &#160;pip install pyecharts pyecharts主页:&#160; &#160; &#160; &#160;http://pyecharts.org 可以展示的图表类型:Bar（柱状图/条形图） Bar3D（3D 柱状图） Boxplot（箱形图） EffectScatter（带有涟漪特效动画的散点图） Funnel（漏斗图） Gauge（仪表盘） Geo（地理坐标系） GeoLines（地理坐标系线图） Graph（关系图） HeatMap（热力图） Kline/Candlestick（K线图） Line（折线/面积图） Line3D（3D 折线图） Liquid（水球图） Map（地图） Parallel（平行坐标系） Pie（饼图） Polar（极坐标系） Radar（雷达图） Sankey（桑基图） Scatter（散点图） Scatter3D（3D 散点图） ThemeRiver（主题河流图） Tree（树图） TreeMap（矩形树图） WordCloud（词云图） 1. 折线图123from pyecharts import onlineonline() 1234567891011121314151617181920from pyecharts import Lineattr = ['周一', '周二', '周三', '周四', '周五', '周六', '周日']line = Line("折线图示例")line.add( "最高气温", attr, [11, 11, 15, 13, 12, 13, 10], mark_point=["max", "min"], mark_line=["average"],)line.add( "最低气温", attr, [1, -2, 2, 5, 3, 2, 0], mark_point=["max", "min"], mark_line=["average"], yaxis_formatter="°C",)line 折线图 2. 柱状图123456789from pyecharts import Barattr = ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]v1 = [5, 20, 36, 10, 75, 90]v2 = [10, 25, 8, 60, 20, 80]bar = Bar("柱状图数据堆叠")bar.add("商家A", attr, v1, is_stack=True)bar.add("商家B", attr, v2, is_stack=True)bar 柱状图数据堆叠 123456from pyecharts import Barbar = Bar("x 轴和 y 轴交换")bar.add("商家A", attr, v1)bar.add("商家B", attr, v2, is_convert=True)bar x 轴和 y 轴交换柱状图 3. Bar3D (3D柱状图)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354from pyecharts import Bar3Dbar3d = Bar3D("3D 柱状图", width=900, height=600)x_axis = [ "12a", "1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a", "12p", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p" ]y_axis = [ "Saturday", "Friday", "Thursday", "Wednesday", "Tuesday", "Monday", "Sunday" ]data = [ [0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6] ]range_color = ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']bar3d.add( "", x_axis, y_axis, [[d[1], d[0], d[2]] for d in data], is_visualmap=True, visual_range=[0, 20], visual_range_color=range_color, grid3d_width=200, grid3d_depth=80,)bar3d 4.饼状图123456from pyecharts import Pieattr = ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]v1 = [11, 12, 13, 10, 10, 10]pie = Pie("饼图示例")pie.add("", attr, v1, is_label_show=True)pie 饼图 123456789101112131415161718192021222324from pyecharts import Piepie = Pie('各类电影中"好片"所占的比例', "数据来着豆瓣", title_pos='center')pie.add("", ["剧情", ""], [25, 75], center=[10, 30], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None, )pie.add("", ["奇幻", ""], [24, 76], center=[30, 30], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None, legend_pos='left')pie.add("", ["爱情", ""], [14, 86], center=[50, 30], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["惊悚", ""], [11, 89], center=[70, 30], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["冒险", ""], [27, 73], center=[90, 30], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["动作", ""], [15, 85], center=[10, 70], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["喜剧", ""], [54, 46], center=[30, 70], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["科幻", ""], [26, 74], center=[50, 70], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["悬疑", ""], [25, 75], center=[70, 70], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None)pie.add("", ["犯罪", ""], [28, 72], center=[90, 70], radius=[18, 24], label_pos='center', is_label_show=True, label_text_color=None, is_legend_show=True, legend_top="center")# pie.show_config()pie 组合饼图 5. 散点图123456789101112131415from pyecharts import Scatterv1 = [10, 20, 30, 40, 50, 60]v2 = [10, 20, 30, 40, 50, 60]scatter = Scatter("散点图")scatter.add("A", v1, v2)scatter.add( "B", v1[::-1], v2, is_visualmap=True, visual_type="size", visual_range_size=[20, 80],)scatter 散点图 6. gauge（仪表盘）12345from pyecharts import Gaugegauge = Gauge("仪表盘示例")gauge.add("业务指标", "完成率", 66.66)gauge 仪表盘图 7. 关系图12345678910111213141516171819from pyecharts import Graphimport osimport jsonwith open(os.path.join("fixtures", "weibo.json"), "r", encoding="utf-8") as f: j = json.load(f) nodes, links, categories, cont, mid, userl = jgraph = Graph("微博转发关系图", width=900, height=600)graph.add( "", nodes, links, categories, label_pos="right", graph_repulsion=50, is_legend_show=False, line_curve=0.2, label_text_color=None,)graph 微博转发关系图 8. 热力图123456789101112131415161718192021222324252627import datetimeimport randomfrom pyecharts import HeatMapbegin = datetime.date(2017, 1, 1)end = datetime.date(2017, 12, 31)data = [ [str(begin + datetime.timedelta(days=i)), random.randint(1000, 25000)] for i in range((end - begin).days + 1)]heatmap = HeatMap("日历热力图示例", "某人 2017 年微信步数情况", width=900)heatmap.add( "", data, is_calendar_heatmap=True, visual_text_color="#000", visual_range_text=["", ""], visual_range=[1000, 25000], calendar_cell_size=["auto", 30], is_visualmap=True, calendar_date_range="2017", visual_orient="horizontal", visual_pos="center", visual_top="80%", is_piecewise=True,)heatmap 日历热力图 9. K 线图123456789101112131415161718192021from pyecharts import Klinev1 = [[2320.26, 2320.26, 2287.3, 2362.94], [2300, 2291.3, 2288.26, 2308.38], [2295.35, 2346.5, 2295.35, 2345.92], [2347.22, 2358.98, 2337.35, 2363.8], [2360.75, 2382.48, 2347.89, 2383.76], [2383.43, 2385.42, 2371.23, 2391.82], [2377.41, 2419.02, 2369.57, 2421.15], [2425.92, 2428.15, 2417.58, 2440.38], [2411, 2433.13, 2403.3, 2437.42], [2432.68, 2334.48, 2427.7, 2441.73], [2430.69, 2418.53, 2394.22, 2433.89], [2416.62, 2432.4, 2414.4, 2443.03], [2441.91, 2421.56, 2418.43, 2444.8], [2420.26, 2382.91, 2373.53, 2427.07], [2383.49, 2397.18, 2370.61, 2397.94], [2378.82, 2325.95, 2309.17, 2378.82], [2322.94, 2314.16, 2308.76, 2330.88], [2320.62, 2325.82, 2315.01, 2338.78], [2313.74, 2293.34, 2289.89, 2340.71], [2297.77, 2313.22, 2292.03, 2324.63], [2322.32, 2365.59, 2308.92, 2366.16], [2364.54, 2359.51, 2330.86, 2369.65], [2332.08, 2273.4, 2259.25, 2333.54], [2274.81, 2326.31, 2270.1, 2328.14], [2333.61, 2347.18, 2321.6, 2351.44], [2340.44, 2324.29, 2304.27, 2352.02], [2326.42, 2318.61, 2314.59, 2333.67], [2314.68, 2310.59, 2296.58, 2320.96], [2309.16, 2286.6, 2264.83, 2333.29], [2282.17, 2263.97, 2253.25, 2286.33], [2255.77, 2270.28, 2253.31, 2276.22]]kline = Kline("K 线图示例")kline.add("日K", ["2017/7/&#123;&#125;".format(i + 1) for i in range(31)], v1)kline K 线图 10. Map (地图)12345678910111213141516from pyecharts import Mapvalue = [155, 10, 66, 78, 33, 80, 190, 53, 49.6]attr = [ "福建", "山东", "北京", "上海", "甘肃", "新疆", "河南", "广西", "西藏" ]map = Map("Map 结合 VisualMap 示例", width=1000, height=600)map.add( "", attr, value, maptype="china", is_visualmap=True, visual_text_color="#000",)map 11.词云图12345678910111213from pyecharts import WordCloudname = [ 'Sam S Club', 'Macys', 'Amy Schumer', 'Jurassic World', 'Charter Communications', 'Chick Fil A', 'Planet Fitness', 'Pitch Perfect', 'Express', 'Home', 'Johnny Depp', 'Lena Dunham', 'Lewis Hamilton', 'KXAN', 'Mary Ellen Mark', 'Farrah Abraham', 'Rita Ora', 'Serena Williams', 'NCAA baseball tournament', 'Point Break']value = [ 10000, 6181, 4386, 4055, 2467, 2244, 1898, 1484, 1112, 965, 847, 582, 555, 550, 462, 366, 360, 282, 273, 265]wordcloud = WordCloud(width=900, height=620)wordcloud.add("", name, value, word_size_range=[20, 100])wordcloud 词云图 12. Geo（地理坐标系）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556from pyecharts import Geodata = [ ("海门", 9),("鄂尔多斯", 12),("招远", 12),("舟山", 12),("齐齐哈尔", 14),("盐城", 15), ("赤峰", 16),("青岛", 18),("乳山", 18),("金昌", 19),("泉州", 21),("莱西", 21), ("日照", 21),("胶南", 22),("南通", 23),("拉萨", 24),("云浮", 24),("梅州", 25), ("文登", 25),("上海", 25),("攀枝花", 25),("威海", 25),("承德", 25),("厦门", 26), ("汕尾", 26),("潮州", 26),("丹东", 27),("太仓", 27),("曲靖", 27),("烟台", 28), ("福州", 29),("瓦房店", 30),("即墨", 30),("抚顺", 31),("玉溪", 31),("张家口", 31), ("阳泉", 31),("莱州", 32),("湖州", 32),("汕头", 32),("昆山", 33),("宁波", 33), ("湛江", 33),("揭阳", 34),("荣成", 34),("连云港", 35),("葫芦岛", 35),("常熟", 36), ("东莞", 36),("河源", 36),("淮安", 36),("泰州", 36),("南宁", 37),("营口", 37), ("惠州", 37),("江阴", 37),("蓬莱", 37),("韶关", 38),("嘉峪关", 38),("广州", 38), ("延安", 38),("太原", 39),("清远", 39),("中山", 39),("昆明", 39),("寿光", 40), ("盘锦", 40),("长治", 41),("深圳", 41),("珠海", 42),("宿迁", 43),("咸阳", 43), ("铜川", 44),("平度", 44),("佛山", 44),("海口", 44),("江门", 45),("章丘", 45), ("肇庆", 46),("大连", 47),("临汾", 47),("吴江", 47),("石嘴山", 49),("沈阳", 50), ("苏州", 50),("茂名", 50),("嘉兴", 51),("长春", 51),("胶州", 52),("银川", 52), ("张家港", 52),("三门峡", 53),("锦州", 54),("南昌", 54),("柳州", 54),("三亚", 54), ("自贡", 56),("吉林", 56),("阳江", 57),("泸州", 57),("西宁", 57),("宜宾", 58), ("呼和浩特", 58),("成都", 58),("大同", 58),("镇江", 59),("桂林", 59),("张家界", 59), ("宜兴", 59),("北海", 60),("西安", 61),("金坛", 62),("东营", 62),("牡丹江", 63), ("遵义", 63),("绍兴", 63),("扬州", 64),("常州", 64),("潍坊", 65),("重庆", 66), ("台州", 67),("南京", 67),("滨州", 70),("贵阳", 71),("无锡", 71),("本溪", 71), ("克拉玛依", 72),("渭南", 72),("马鞍山", 72),("宝鸡", 72),("焦作", 75),("句容", 75), ("北京", 79),("徐州", 79),("衡水", 80),("包头", 80),("绵阳", 80),("乌鲁木齐", 84), ("枣庄", 84),("杭州", 84),("淄博", 85),("鞍山", 86),("溧阳", 86),("库尔勒", 86), ("安阳", 90),("开封", 90),("济南", 92),("德阳", 93),("温州", 95),("九江", 96), ("邯郸", 98),("临安", 99),("兰州", 99),("沧州", 100),("临沂", 103),("南充", 104), ("天津", 105),("富阳", 106),("泰安", 112),("诸暨", 112),("郑州", 113),("哈尔滨", 114), ("聊城", 116),("芜湖", 117),("唐山", 119),("平顶山", 119),("邢台", 119),("德州", 120), ("济宁", 120),("荆州", 127),("宜昌", 130),("义乌", 132),("丽水", 133),("洛阳", 134), ("秦皇岛", 136),("株洲", 143),("石家庄", 147),("莱芜", 148),("常德", 152),("保定", 153), ("湘潭", 154),("金华", 157),("岳阳", 169),("长沙", 175),("衢州", 177),("廊坊", 193), ("菏泽", 194),("合肥", 229),("武汉", 273),("大庆", 279)]geo = Geo( "全国主要城市空气质量", "data from pm2.5", title_color="#fff", title_pos="center", width=1000, height=600, background_color="#404a59",)attr, value = geo.cast(data)geo.add( "", attr, value, visual_range=[0, 200], visual_text_color="#fff", symbol_size=15, is_visualmap=True,)geo 1234567891011121314151617181920geo = Geo( "全国主要城市空气质量", "data from pm2.5", title_color="#fff", title_pos="center", width=1000, height=600, background_color="#404a59",)attr, value = geo.cast(data)geo.add( "", attr, value, type="heatmap", is_visualmap=True, visual_range=[0, 300], visual_text_color="#fff",)geo]]></content>
      <categories>
        <category>Data Aanalysis</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git pull和本地文件冲突]]></title>
    <url>%2F2018%2F08%2F25%2Fgit%20pull%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;同事在使用git pull代码时，经常会碰到有冲突的情况，提示如下信息：error: Your local changes to ‘c/environ.c’ would be overwritten by merge. Aborting.Please, commit your changes or stash them before you can merge. &#160; &#160; &#160; &#160;这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。 处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。 1、先将本地修改存储起来$ git stash这样本地的所有修改就都被暂时存储起来 。其中stash@{0}就是刚才保存的标记。 2、pull内容暂存了本地修改之后，就可以pull了。$ git pull 3、还原暂存的内容$ git stash pop stash@{0}系统提示如下类似的信息：Auto-merging c/environ.cCONFLICT (content): Merge conflict in c/environ.c意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。 4、解决文件中冲突的的部分&#160; &#160; &#160; &#160;打开冲突的文件，其中Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容。&#160; &#160; &#160; &#160;碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。解决完成之后，就可以正常的提交了。]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“钢铁牢笼”－《新教伦理与资本主义精神》有感]]></title>
    <url>%2F2018%2F08%2F24%2Fweber%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;信仰与理性之间是什么关系，可能会有很多人认为这两者之间是充满张力的对立的矛盾的两相。然而，韦伯在《新教伦理与资本主义精神》中就通过缜密的逻辑分析论证了宗教伦理与经济制度之间强烈的内在亲缘性。基督新教特有的宗教观念将“神恩蒙宠”视为一种身份，被选中的人将获得神的救赎而达到彼世，而此一身份的拥有必须证明自身的行为举止有异于“自然人”的生活方式。因此，在每位信徒身上一种以系统地讲求方法地审视自身的恩宠状态为动机的禁欲化的生活方式逐渐形成，最终导致以神的意志为导向的理性生活方式的形成。&#160; &#160; &#160; &#160;这种宗教观念渗透在信徒的个人生活和伦理判断中，逐渐形成了有系统的自我检视，塑造出一套首尾一贯笼罩整体的追求秩序和方法的生活方式，最终导致个人和社会整体的理性化。这种理性化的“入世苦行”的生活方式产生了一种新的财富观：认为获取财富并不是为了此世的享乐，而是最终指向一个信仰，即他们信仰的神，以世俗劳动作为禁欲苦行的最高手段，抵制自由享乐，对抗财产的非理性消费，以致富为终极目标而追求财富，荣耀上帝以求得到神的拣选而获得救赎。而这种禁欲的强制节制最终导致资本的形成，资本主义精神也由此产生。 &#160; &#160; &#160; &#160;这种建立在特殊宗教伦理基础之上的资本主义精神的确起到了积极的推动作用，直接导致了前所未有的生产方式和经济组织方式的形成，带来极大的财富和便利。然而在纯正的宗教热潮过了巅峰时期之时，追求天国理想的奋斗开始慢慢消解成冷静的职业道德，宗教根基逐渐枯萎，被功利的现世执着取代。这种“断根”的资本主义下，“朝圣人”被“经济人”取代，形成一种独特的市民职业风格。资本主义制度的双重性、内在矛盾与悖论性暴露无疑。正如韦伯所说，“现今的资本主义经济秩序是个巨大的宇宙，个人呱呱坠地于其中，对他而言，至少作为个体，这是个他必须生活在里头的既存的、事实上如铜墙铁壁般的桎梏。这宇宙强迫个人奉行其经济行为的规范，只要个人是卷入市场关系中的话。”资本主义的强制性以如钢铁般牢笼，每个置身其中的人都无力逃脱。 &#160; &#160; &#160; &#160;正如当今我们这个时代所看到的资本主义经济秩序，这种铜墙铁壁般的桎梏，不仅仅是物质上、生存上的枷锁，也包含在资本主义发展过程中逐渐形成的价值牢笼。这种价值观溯源于书中描述的“资本主义精神”，但是其内核随着资本主义经济秩序占据了社会的主导地位之后，其宗教基础逐渐淡化，取而代之的，是一种设计的、假想的社会价值观念。能够调动社会大量资源的资产运作者，将原有资本主义的观念进行改造重组，形成一种有利于资本发展的新观念体系，借助社会这个庞大的传播系统广而告之，不断的刷新人们的三观，于潜移默化之中改变着普罗大众的价值观，让个体不仅仅在物质上受到钳制，在价值观上还受到周遭社会环境的压迫，不得不投身于资本主义经济秩序，努力成为资本所青睐的增值工具。 &#160; &#160; &#160; &#160;这种价值观导致追求资本和财富实现极大利益获取的过程被社会赋予了极大的认同。人们被新的社会观念和众人的眼光压迫着，追求更好的成绩，更高的工资，更多的财富，从而为市场经济创造更多的价值，而自身的实际追求和价值观，则在纷繁迷人的成功学概念中被淹没掉了。说到这里，我再一次想起了一部电影《Fight Club》，这部电影所表现出的对现今资本主义精神的极度厌恶正是这深处牢笼之中被奴役的人类的反思。 &#160; &#160; &#160; &#160;Advertising has its taste in cars and clothes. Working jobs we hate so we can buy shit we don’t need. We’re the middle children of history. No purpose or place. We have no great war, no great depression. Our great war’s a spiritual war. Our great depression is our lives. We’ve all been raised on television to believe that one day we’d all be millionaires and movie gods and rock stars. But we won’t. We’re slowly learning that fact. And we’re very, very pissed off.(广告诱惑我们买车子，衣服，于是拼命工作买不需要的东西，我们是被历史遗忘的一代，没有目的，没有地位，没有世界大战，没有经济大恐慌，我们的大战只是心灵之战，我们的恐慌只是我们的生活。我们从小看电视，相信有一天会成为富翁，明星或摇滚巨星，但是，我们不会。那是我们逐渐面对着的现实，所以我们非常愤怒。) &#160; &#160; &#160; &#160;Why do guys like you and I know what a duvet is? Is this essential to our survival in the hunter-gatherer sense of the world? No. What are we, then? We’re consumers. We are by-products of a lifestyle obsession. Murder, crime, poverty…these things don’t concern me. What concerns me are celebrity magazines, television with 500 channels, some guy’s name on my underwear. Rogaine, viagra, olestra.(我们一定要知道鸭绒垫子吗？我们一定要字字斟酌吗？不。那你和我算什么？我们是消费者，我们满脑子想的都是物质。我不关心凶杀案和贫穷问题，我只关心名人杂志，500个频道的电视，我内裤上印着谁的名字。生发剂，威尔钢，减肥药。) &#160; &#160; &#160; &#160;”The things you own end up owning you.”,在表达对资本主义咆哮般的怒斥的同时,恰恰也表现出被钢铁牢笼无情禁锢却又无法逃脱其中的无奈.]]></content>
      <categories>
        <category>哲学宗教</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[博客终于搭建起来了,写点小文章,欢迎大家来访~(_^^_)~]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
