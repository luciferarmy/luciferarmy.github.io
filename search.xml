<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Appium简介</title>
      <link href="/2019/08/26/appium/"/>
      <url>/2019/08/26/appium/</url>
      <content type="html"><![CDATA[<h1 id="1-appium简介"><a href="#1-appium简介" class="headerlink" title="1.appium简介"></a>1.appium简介</h1><p>Appia是一个开源、跨平台的移动端自动化测试框架，可以用来测试移动端应用。</p><p>特点：</p><ul><li>开源</li><li>跨平台，跨架构:<br>  NativeApp、Hybird App、Web App都支持，在不同平台中（iOS，Android，Firefox OS）使用了同一套标准的自动化API。</li><li>Appium支持Selenium WebDriver支持的所有语言，如java、Object-C、JavaScript、Php、Python、Ruby、C#、Clojure，或者Perl语言，更可以使用Selenium WebDriver的Api。</li><li>不需要重新编译APP</li></ul><p>官方文档：<a href="http://appium.io/docs/en/about-appium/intro/" target="_blank" rel="noopener">http://appium.io/docs/en/about-appium/intro/</a></p><a id="more"></a><h1 id="2-appium工作原理"><a href="#2-appium工作原理" class="headerlink" title="2.appium工作原理"></a>2.appium工作原理</h1><p><img src="/assets/blogImg/appium_img/architecture.png" alt=""></p><h2 id="2-1相关概念："><a href="#2-1相关概念：" class="headerlink" title="2.1相关概念："></a>2.1相关概念：</h2><h3 id="2-1-1-C-S架构"><a href="#2-1-1-C-S架构" class="headerlink" title="2.1.1 C/S架构"></a>2.1.1 C/S架构</h3><p>　　appium server是一个遵守REST设计风格的Web服务器，核心功能：监听一个端口，然后接收由client发送来的命令。翻译这些命令，把这些命令转成移动设备可以理解的形式发送给移动设备，然后移动设备执行完这些命令后把执行结果返回给appium server，appium server再把执行结果返回给client。<br>这种架构给我们提供了很好的开放特性，只要某种语言有HTTP客户端的API,我们就可以通过这个语言写自己的测试代码。</p><h3 id="2-1-2-Session"><a href="#2-1-2-Session" class="headerlink" title="2.1.2 Session"></a>2.1.2 Session</h3><p>　　Appium始终在一个Session(会话)上下文中进行。客户端初始化一个Session来与服务端交互，不同的语言使用不同的交互方式，但它们最终都是发送一个POST请求给服务端，该请求中包含一个被称作“desired capabilities”的JSON对象。此时，服务端就会开启一个自动化的Session,然后返回一个Session ID,Session ID将会被用来发送后续的命令。</p><h3 id="2-1-3-Desired-Capabilities"><a href="#2-1-3-Desired-Capabilities" class="headerlink" title="2.1.3 Desired Capabilities"></a>2.1.3 Desired Capabilities</h3><p>　　Desired Capabilities是一些键值对的集合（例如，一个map或者hash）。客户端将这些键值对发送给Appium服务端，告诉服务端我们想要怎样开始测试，比如，可以把platformName capability设置为iOS,告诉服务端，我们想要一个iOS的Session，而不是安卓。</p><h3 id="2-1-4-Appium服务端"><a href="#2-1-4-Appium服务端" class="headerlink" title="2.1.4 Appium服务端"></a>2.1.4 Appium服务端</h3><p>　　Appium是用用node.js编写的HTTP服务器，我们既可以用源码编译，也可以从npm直接安装。<br>实现了Webdriver JSON wire protocol协议（继承自selenium的webdriver wire protocol，并进行了扩展，使得Json wire protocol能够控制不同的移动设备的行为）</p><h3 id="2-1-5-Appium客户端"><a href="#2-1-5-Appium客户端" class="headerlink" title="2.1.5 Appium客户端"></a>2.1.5 Appium客户端</h3><p>　　此客户端的概念不是传统意义上的客户端，是一个扩展的WebDriver协议库，包含各种移动端操作方法</p><h3 id="2-1-6-bootstrap"><a href="#2-1-6-bootstrap" class="headerlink" title="2.1.6 bootstrap"></a>2.1.6 bootstrap</h3><p>Bootstrap是Appium运行在安卓目标测试机器上的一个UiAutomator测试脚本，该脚本的唯一一个所做的事情是在目标机器开启一个socket服务器,专门监听4724端口过来的appium的连接和命令数据，并把appium的命令转换成uiautomator的命令来让uiautomator进行处理；</p><p><img src="/assets/blogImg/appium_img/appium_android.png" alt=""></p><p><img src="/assets/blogImg/appium_img/appium_ios.png" alt=""></p><h2 id="2-2工作流程"><a href="#2-2工作流程" class="headerlink" title="2.2工作流程"></a>2.2工作流程</h2><ol><li><p>开启appium server  <a href="http://127.0.0.1:4723/wd/hub" target="_blank" rel="noopener">http://127.0.0.1:4723/wd/hub</a></p></li><li><p>客户端发送 POST /wd/hub/session：将desired capabilitie中的键值对组合成一个JSON,然后通过HTTP协议发送到Appium服务端创建一个session.后续客户端与服务端的所有交互都是围绕着这个session进行的。</p><p><img src="/assets/blogImg/appium_img/appium_session.png" alt=""></p></li><li><p>根据desired capabilitie中的配置再通过USB接口与相应的设备（Android或IOS）之间创建TCP连接;</p></li><li><p>将bootstrap.jar（或bootstrap.js）push到移动设备中，并开启设备上的基于appium bootstrap的socket服务，绑定本机和boostrap通信的端口号4724用于和Android设备通讯，默认监听4724端口（默认为4724，可以自定义），等待appium server的连接</p></li><li><p>执行客户端代码开始操作移动设备：</p><p>流程如下：</p><p><img src="/assets/blogImg/appium_img/appium_workprocess.png" alt=""></p><p>客户端执行的操作通过post请求发送给服务端，服务端再操作移动设备进行处理，发送的请求示例如下：</p><p><img src="/assets/blogImg/appium_img/appium_workprocess2.png" alt=""></p></li></ol><h1 id="3-appium环境搭建"><a href="#3-appium环境搭建" class="headerlink" title="3.appium环境搭建"></a>3.appium环境搭建</h1><h2 id="3-1Windows平台"><a href="#3-1Windows平台" class="headerlink" title="3.1Windows平台"></a>3.1Windows平台</h2><ol><li>JDK安装<br>jdk包：<br>jdk-8u171-windows-x64.exe   <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>Java环境变量配置：<br>JAVA_HOME——C:\Program Files\Java\jdk1.8.0_171<br>PATH——;%JAVA_HOME%\bin\;%JAVA_HOME%\jre\bin\;<br>测试：<br>Java -version</li><li>SDK安装<br>adt-bundle-windows-x86_64-20140702   <a href="https://developer.oculus.com/documentation/mobilesdk/0.6/concepts/mobile-dev-setup-android-win/" target="_blank" rel="noopener">https://developer.oculus.com/documentation/mobilesdk/0.6/concepts/mobile-dev-setup-android-win/</a><br>环境变量配置：<br>ANDROID_HOME——C:\Users\dell\Downloads\adt-bundle-windows-x86_64-20140702\adt-bundle-windows-x86_64-20140702\sdk<br>PATH——;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools\;<br>测试：<br>adb version</li><li>node.js安装：<br>网站：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>设置环境变量<br>PATH——C:\Program Files\nodejs\<br>测试：<br>node -v</li><li>appium安装：<br>方式一：<br>appium-server版本下载地址（自带node.js，可以选择4.16版本）：<br><a href="https://bitbucket.org/appium/appium.app/downloads/" target="_blank" rel="noopener">https://bitbucket.org/appium/appium.app/downloads/</a><br>找到appium\node_modules.bin将其添加到path环境变量中，<br>cmd执行appium-doctor检查环境<br>方式二：<br>使用npm安装：  </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g appium --registry=https://registry.npm.taobao.org</span><br><span class="line">appium –v</span><br><span class="line">npm install -g appium-doctor</span><br><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><p>​        注意：npm命令安装的appium是控制台程序，没有UI界面<br>​                    appium-desktop下载地址：<a href="https://github.com/appium/appium-desktop/releases" target="_blank" rel="noopener">https://github.com/appium/appium-desktop/releases</a></p><ol start="5"><li>夜神模拟器安装（或者使用真机）</li><li>Python客户端安装<br>pip install Appium-Python-Client</li></ol><p>注意：  </p><p><strong>使用adb工具操作安卓设备需要在设备上启用adb调试</strong><br>参考文档：<a href="https://developer.android.com/studio/command-line/adb.html#wireless" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html#wireless</a>  </p><p>使用adb连接安卓设备的三种方式：  </p><ol><li><p>usb连接<br>设置–开发者选项–允许usb调试  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices  # 查看设备连接情况</span><br></pre></td></tr></table></figure></li><li><p>wifi连接<br>手机与电脑在同一局域网内，Android设备连接WiFi，然后adb命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;设备IP&gt;</span><br></pre></td></tr></table></figure></li><li><p>无线连接<br>开发者选项，点允许usb调试  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb tcpip 5555</span><br></pre></td></tr></table></figure></li></ol><p>找到设备的 IP 地址（一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，或者使用命令：adb shell ifconfig wlan0） </p><p>通过 IP 地址连接设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect &lt;ip&gt;:5555</span><br></pre></td></tr></table></figure><p>连接夜神模拟器：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 夜神模拟器默认端口为62001，多开后各个机器的端口nox_i = 62023+i </span><br><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure><p><strong>获取app的appPackage和appActivity数据的方式</strong><br>adb连接设备，打开对应APP ，在cmd使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window |findstr mCurrentFocus</span><br></pre></td></tr></table></figure><h2 id="3-2Docker安装"><a href="#3-2Docker安装" class="headerlink" title="3.2Docker安装"></a>3.2Docker安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1. 拉取镜像</span><br><span class="line">sudo docker pull appium/appium</span><br><span class="line"><span class="meta">#</span> 2. 启动appium</span><br><span class="line">docker run --privileged -d -p 4723:4723 -v ~/.android:/root/.android -v /dev/bus/usb:/dev/bus/usb --name appium_container appium/appium</span><br><span class="line"><span class="meta">#</span> 3. docker appium连接设备</span><br><span class="line">adb devices   # 查看windows连接设备</span><br><span class="line">adb connect 127.0.0.1:62001   # 手动连接设备</span><br><span class="line">adb -s 127.0.0.1:62001 tcpip 5555(自己设置的端口号)   # 更改连接方式</span><br><span class="line">docker exec -it appium_container adb devices   # 查看连接设备</span><br><span class="line">docker exec -it appium_container adb connect 10.0.8.16(设备ip):5555(端口)   # 手动连接设备</span><br></pre></td></tr></table></figure><h1 id="4-Python操作appium"><a href="#4-Python操作appium" class="headerlink" title="4.Python操作appium"></a>4.Python操作appium</h1><h2 id="4-1-示例代码"><a href="#4-1-示例代码" class="headerlink" title="4.1.示例代码"></a>4.1.示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment"># app配置参数</span></span><br><span class="line"></span><br><span class="line">desired_caps = &#123;</span><br><span class="line">    <span class="string">'platformName'</span>: <span class="string">'Android'</span>,</span><br><span class="line">    <span class="string">'deviceName'</span>: <span class="string">'127.0.0.1:62001'</span>,</span><br><span class="line">    <span class="string">'appPackage'</span>: <span class="string">'video.like'</span>,</span><br><span class="line">    <span class="string">'appActivity'</span>: <span class="string">'com.yy.iheima.startup.MainActivity'</span></span><br><span class="line">&#125;</span><br><span class="line">port = <span class="string">'4723'</span></span><br><span class="line">udid = <span class="string">"127.0.0.1:62001"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_appium</span><span class="params">(port=<span class="number">4723</span>)</span>:</span></span><br><span class="line">    <span class="string">'''关闭appium服务'''</span></span><br><span class="line">    p = os.popen(<span class="string">f'netstat  -aon|findstr <span class="subst">&#123;port&#125;</span>'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    p0 = p.read().strip().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> p0 != <span class="string">''</span> <span class="keyword">and</span> <span class="string">'LISTENING'</span> <span class="keyword">in</span> p0:</span><br><span class="line">        p1 = int(p0.split(<span class="string">'LISTENING'</span>)[<span class="number">1</span>].strip())  <span class="comment"># 获取进程号</span></span><br><span class="line">        os.popen(<span class="string">f'taskkill /F /PID <span class="subst">&#123;p1&#125;</span>'</span>)  <span class="comment"># 结束进程</span></span><br><span class="line">        print(<span class="string">'appium server已结束'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_appium</span><span class="params">(port=<span class="number">4723</span>, udid=<span class="string">"127.0.0.1:62001"</span>)</span>:</span></span><br><span class="line">    <span class="string">'''开启appium服务'''</span></span><br><span class="line">    stop_appium(port)  <span class="comment"># 先判断端口是否被占用，如果被占用则关闭该端口号</span></span><br><span class="line">    <span class="comment"># 根据系统，启动对应的服务，-U 指定一个设备名称（adb devices可以查看）</span></span><br><span class="line">    <span class="comment"># cmd = f'start /b appium -a 127.0.0.1 -p &#123;port&#125; -U &#123;udid&#125; --automation-name Appium --session-override --log D:\appium_log.log'</span></span><br><span class="line">    cmd = <span class="string">r"start /b node D:\software\Appium\node_modules\appium\lib\server\main.js --address 127.0.0.1 --port %s -U %s --platform-name Android --automation-name Appium --session-override --log D:\appium_log.log"</span> % (</span><br><span class="line">        port, udid)</span><br><span class="line">    os.system(cmd)</span><br><span class="line">    time.sleep(<span class="number">6</span>)  <span class="comment"># 等待启动完成</span></span><br><span class="line">    print(<span class="string">'appium启动成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 启动appium_server</span></span><br><span class="line">    start_appium()</span><br><span class="line">    driver = webdriver.Remote(<span class="string">'http://127.0.0.1:%s/wd/hub'</span> % port, desired_caps)</span><br><span class="line">    time.sleep(<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># 执行代码</span></span><br><span class="line">    <span class="comment"># 点击搜索按钮进入搜索页</span></span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">30</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.XPATH,</span><br><span class="line">                                               <span class="string">'//*[@resource-id="video.like:id/tab_layout"]/android.widget.LinearLayout/android.widget.RelativeLayout[2]'</span>))).click()</span><br><span class="line">    <span class="comment"># 选中搜索框</span></span><br><span class="line">    wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@resource-id="video.like:id/btn_search"]'</span>))).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入关键字进行搜索</span></span><br><span class="line">    search = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@resource-id="video.like:id/search_et"]'</span>)))</span><br><span class="line">    search.set_text(<span class="string">'sofiarach'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run_app()</span><br></pre></td></tr></table></figure><ul><li>后台运行appium命令: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 用appium自带的node运行main.js文件启动</span><br><span class="line">start /b node D:\software\Appium\node_modules\appium\lib\server\main.js --address 127.0.0.1 --port 4723 -U 127.0.0.1:62001 --platform-name Android --automation-name Appium --session-override --log D:\appium_log.log</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> appium命令运行</span><br><span class="line">start /b appium -a 127.0.0.1 -p 4723 --session-override --log D:\appium_log.log</span><br></pre></td></tr></table></figure><p>访问127.0.0.1:4723显示如下说明启动成功</p><p><img src="/assets/blogImg/appium_img/appium_startPage.png" alt=""></p><ul><li>停止appium命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat  -aon|findstr 4723</span><br><span class="line">taskkill /F /PID &#123;pid&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-元素定位"><a href="#4-2-元素定位" class="headerlink" title="4.2.元素定位"></a>4.2.元素定位</h2><h3 id="4-2-1-方法一"><a href="#4-2-1-方法一" class="headerlink" title="4.2.1.方法一"></a>4.2.1.方法一</h3><p>使用Android SDK的uiautomatorviewer定位元素<br>启动uiautomatorviewer.bat  </p><p><img src="/assets/blogImg/appium_img/appium_uiautomatorviewer.png" alt=""></p><p>单击Device Screenshot便可以定位元素，右上框显示元素的定位  </p><p><img src="/assets/blogImg/appium_img/appium_uiautomatorviewer2.png" alt=""></p><p>注意：<br>需要将appium server停止以后才能使用  </p><h3 id="4-2-2-方法二"><a href="#4-2-2-方法二" class="headerlink" title="4.2.2.方法二"></a>4.2.2.方法二</h3><p>使用weditor定位元素：  </p><ol><li><p>安装python-uiautomator2  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --pre -U uiautomator2</span><br></pre></td></tr></table></figure></li><li><p>初始化uiautomator2<br>adb连接到安卓设备，然后在命令行输入： python -m uiautomator2 init<br>这时会在安卓设备安装atx-agent，最后提示successfully证明atx-agent初始化成功</p></li><li><p>安装weditor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --pre weditor</span><br></pre></td></tr></table></figure></li><li><p>运weditor<br>浏览器会自动打开一个网页<a href="http://loaclhost:17310" target="_blank" rel="noopener">http://loaclhost:17310</a><br>点击Connect如果出现绿色叶子就是正常了<br>点击Dump Hierarchy的可以刷新手机界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m weditor</span><br></pre></td></tr></table></figure></li></ol><p><img src="/assets/blogImg/appium_img/appium_weditor.png" alt=""></p><h2 id="4-3-常用API"><a href="#4-3-常用API" class="headerlink" title="4.3.常用API"></a>4.3.常用API</h2><h3 id="4-3-1元素定位"><a href="#4-3-1元素定位" class="headerlink" title="4.3.1元素定位"></a>4.3.1元素定位</h3><p>appium 官方api文档：<a href="http://appium.io/docs/en/about-appium/api/" target="_blank" rel="noopener">http://appium.io/docs/en/about-appium/api/</a><br>Appium-Python-Client文档： <a href="https://pypi.org/project/Appium-Python-Client/" target="_blank" rel="noopener">https://pypi.org/project/Appium-Python-Client/</a></p><p><img src="/assets/blogImg/appium_img/appium_selector.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个元素定位：</span></span><br><span class="line">driver.find_element_by_id(id_) </span><br><span class="line">driver.find_element_by_name(name) </span><br><span class="line">driver.find_element_by_class_name(name) </span><br><span class="line">driver.find_element_by_xpath(xpath)</span><br><span class="line">driver.find_element_by_accessibility_id(id) </span><br><span class="line">driver.find_element_by_android_uiautomator(uia_string) </span><br><span class="line">driver.find_element_by_ios_uiautomation(uia_string)</span><br><span class="line">driver.find_element_by_ios_predicate(predicate_string) </span><br><span class="line">driver.find_element_by_css_selector(css_selector) </span><br><span class="line">driver.find_element_by_link_text(link_text) </span><br><span class="line">driver.find_element_by_partial_link_text(link_text) </span><br><span class="line">driver.find_element_by_tag_name(name) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个元素定位：</span></span><br><span class="line">driver.find_elements_by_accessibility_id(id) </span><br><span class="line">driver.find_elements_by_android_uiautomator(uia_string) </span><br><span class="line">driver.find_elements_by_class_name(name) </span><br><span class="line">driver.find_elements_by_css_selector(css_selector) </span><br><span class="line">driver.find_elements_by_id(id_) </span><br><span class="line">driver.find_elements_by_ios_predicate(predicate_string) </span><br><span class="line">driver.find_elements_by_ios_uiautomation(uia_string) </span><br><span class="line">driver.find_elements_by_link_text(text) </span><br><span class="line">driver.find_elements_by_name(name) </span><br><span class="line">driver.find_elements_by_partial_link_text(link_text) </span><br><span class="line">driver.find_elements_by_tag_name(name) </span><br><span class="line">driver.find_elements_by_xpath(xpath)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他：(两个私有方法)</span></span><br><span class="line">driver.find_element(by, value)</span><br><span class="line">driver.find_elements(by, value)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1.find_element_by_id</span><br><span class="line">用法：通过元素id来查找元素</span><br><span class="line">示例：driver.find_element_by_id(&apos;com.lazada.android:id/laz_hpc_channel_top_text&apos;)</span><br><span class="line">这里元素id和 UIAutomatorView 中该元素的 resource id是一致的。</span><br><span class="line"></span><br><span class="line">2.find_element_by_accessibility_id(id)</span><br><span class="line">示例：driver.find_element_by_accessibility_id(&quot;delete&quot;)</span><br><span class="line">这里的accessibility id 跟 UIAutomatorView 中该元素的 content-desc 是一致的。</span><br><span class="line"></span><br><span class="line">3. find_element_by_name(name)</span><br><span class="line">用法：通过元素 name 来查找元素</span><br><span class="line">示例：driver.find_element_by_name(&quot;Kategori&quot;)</span><br><span class="line">这里的name跟 UIAutomatorView 中该元素的 Text是一致的。</span><br><span class="line"></span><br><span class="line">4. find_element_by_class_name(name)</span><br><span class="line">用法：通过元素class name来查找元素</span><br><span class="line">示例：driver.find_element_by_class_name(&quot;android.widget.TextView&quot;)</span><br><span class="line">这里的class name跟 UIAutomatorView 中该元素的 class 是一致的。需要注意的是，由于 class name不是唯一的，所以可能存在一个页面上有多个元素具有相同的class name。</span><br><span class="line"></span><br><span class="line">5. find_element_by_xpath(xpath)</span><br><span class="line">用法：通过元素xpath来查找元素</span><br><span class="line">示例：driver.find_element_by_xpath(&apos;//*[@resource-id=&quot;com.lazada.android:id/laz_hp_channels_recycle&quot;]/android.widget.LinearLayout[8]&apos;)</span><br><span class="line">通过xpath进行定位的好处是，比较绝对，任何一个元素都可以通过xpath进行定位。</span><br><span class="line"></span><br><span class="line">6. find_element_by_android_uiautomator(uia_string)</span><br><span class="line">用法：通过 UiAutomator 中的定位来进行android设备元素定位</span><br><span class="line">示例：</span><br><span class="line">driver.find_element_by_android_uiautomator(&apos;new UiSelector().resourceId(&quot;com.lazada.android:id/laz_hpc_channel_top_text&quot;)&apos;)</span><br><span class="line"></span><br><span class="line"># 根据 text 定位</span><br><span class="line">driver.find_element_by_android_uiautomator(&apos;new UiSelector().text(&quot;%s&quot;)&apos;)  #对应uiautomator名称：“text”</span><br><span class="line"></span><br><span class="line"># 根据 description 定位</span><br><span class="line">driver.find_element_by_android_uiautomator(&apos;new UiSelector().description(&quot;%s&quot;)&apos;)  # 对应uiautomator名称：“content-desc”</span><br><span class="line"></span><br><span class="line"># 根据 className 定位</span><br><span class="line">driver.find_element_by_android_uiautomator(&apos;new UiSelector().className(&quot;%s&quot;)&apos;) # 对应uiautomator名称：“class”</span><br><span class="line"></span><br><span class="line"># 根据 index 定位</span><br><span class="line">driver.find_element_by_android_uiautomator(&apos;new UiSelector().index(&quot;%s&quot;)&apos;) # 对应uiautomator名称：“index”</span><br><span class="line"></span><br><span class="line">7.driver.find_element_by_ios_uiautomation(uia_string)</span><br><span class="line">用法：通过iOS uiautomation中的定位来进行IOS设备元素定位</span><br><span class="line">示例：</span><br><span class="line">el = self.driver.find_element_by_ios_uiautomation(&apos;.elements()[0]&apos;)</span><br><span class="line">self.assertEqual(&apos;UICatalog&apos;, el.get_attribute(&apos;name&apos;))</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/appium_img/appium_find_elm.png" alt=""></p><h3 id="4-3-2其他常用方法"><a href="#4-3-2其他常用方法" class="headerlink" title="4.3.2其他常用方法"></a>4.3.2其他常用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># contexts(self) 返回当前会话中的上下文，使用后可以识别H5页面的控件</span></span><br><span class="line">a = driver.contexts</span><br><span class="line"><span class="comment"># current_context(self) 返回当前会话的当前上下文</span></span><br><span class="line">b = driver.current_context</span><br><span class="line"><span class="comment"># context(self) 返回当前会话的当前上下文。</span></span><br><span class="line">c = driver.context</span><br><span class="line"></span><br><span class="line"><span class="comment"># scroll(self, origin_el, destination_el) 从元素origin_el滚动至元素destination_el</span></span><br><span class="line">driver.scroll(el1, el2)</span><br><span class="line"><span class="comment"># drag_and_drop(self, orgin_el, destination_el) 将元素origin_el拖到目标元素destination_el</span></span><br><span class="line">driver.drag_and_drop(el1, el2)</span><br><span class="line"><span class="comment"># tap(self, positions, duration=None) 模拟手指点击（最多五个手指），可设置按住时间长度（毫秒）</span></span><br><span class="line">driver.tap([(<span class="number">100</span>, <span class="number">20</span>), (<span class="number">100</span>, <span class="number">60</span>), (<span class="number">100</span>, <span class="number">100</span>)], <span class="number">500</span>)</span><br><span class="line"><span class="comment"># swipe(self, start_x, start_y, end_x, end_y, duration=None) 从A点滑动至B点，滑动时间为毫秒</span></span><br><span class="line">driver.swipe(<span class="number">90</span>, <span class="number">80</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment"># flick(self, start_x, end_x, end_y) 按住A点后快速滑动至B点</span></span><br><span class="line">driver.flick(<span class="number">20</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pinch(self, element=None, percent=200, steps=50) 在元素上执行模拟双指捏（缩小操作）</span></span><br><span class="line">driver.pinch(element)</span><br><span class="line"><span class="comment"># zoom(self, element=None, percent=200, steps=50) 在元素上执行放大操作</span></span><br><span class="line">driver.zoom(element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset(self) 重置应用(类似删除应用数据)</span></span><br><span class="line">driver.reset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># hide_keyboard(self, key_name=None, key=None, strategy=None) 隐藏键盘,iOS使用key_name隐藏，安卓不使用参数</span></span><br><span class="line">driver.hide_keyboard()</span><br><span class="line"></span><br><span class="line"><span class="comment"># keyevent(self, keycode, metastate=None) 发送按键码（安卓仅有），按键码可以上网址中找到</span></span><br><span class="line">driver.keyevent(<span class="string">'4'</span>) <span class="comment">#返回键</span></span><br><span class="line"><span class="comment"># press_keycode(self, keycode, metastate=None) 发送按键码（安卓仅有），按键码可以上网址中找到</span></span><br><span class="line">driver.press_keycode(<span class="string">'4'</span>) <span class="comment">#返回键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># current_activity(self) 获取当前的activity</span></span><br><span class="line">d = driver.current_activity()</span><br><span class="line"></span><br><span class="line"><span class="comment"># wait_activity(self, activity, timeout, interval=1) 等待指定的activity出现直到超时(秒)，interval为扫描间隔1秒</span></span><br><span class="line">driver.wait_activity(<span class="string">'.activity.xxx'</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># background_app(self, seconds) 后台运行app多少秒后再运行</span></span><br><span class="line">driver.background_app(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># is_app_installed(self, bundle_id) 检查app是否有安装,返回True/False</span></span><br><span class="line">driver.is_app_installed(<span class="string">'com.xxx.xxx'</span>)</span><br><span class="line"><span class="comment"># install_app(self, app_path) 安装app,app_path为安装包路径</span></span><br><span class="line">driver.install_app(<span class="string">'c:/xxx/xxx.apk'</span>)</span><br><span class="line"><span class="comment"># remove_app(self, app_id)</span></span><br><span class="line">driver.remove_app(<span class="string">'com.xxx.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># launch_app(self) 启动app</span></span><br><span class="line">driver.launch_app()</span><br><span class="line"><span class="comment"># close_app(self) 关闭app</span></span><br><span class="line">driver.close_app()</span><br><span class="line"></span><br><span class="line"><span class="comment"># start_activity(self, app_package, app_activity, **opts) 在测试过程中打开任意活动。如果活动属于另一个应用程序，该应用</span></span><br><span class="line"><span class="comment"># 程序的启动和活动被打开。这是一个安卓的方法</span></span><br><span class="line">driver.start_activity(app_package, app_activity)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lock(self, seconds) 锁屏一段时间  iOS专有</span></span><br><span class="line">driver.lock(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shake(self) 摇一摇手机</span></span><br><span class="line">driver.shake()</span><br><span class="line"></span><br><span class="line"><span class="comment"># open_notifications(self) 打系统通知栏（仅支持API 18 以上的安卓系统）</span></span><br><span class="line">driver.open_notifications()</span><br><span class="line"></span><br><span class="line"><span class="comment"># network_connection(self) 返回网络类型  数值</span></span><br><span class="line">e = driver.network_connection</span><br><span class="line"><span class="comment"># set_network_connection(self, connectionType) 设置网络类型</span></span><br><span class="line"><span class="keyword">from</span> appium.webdriver.connectiontype <span class="keyword">import</span> ConnectionType</span><br><span class="line">driver.set_network_connection(ConnectionType.WIFI_ONLY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># available_ime_engines(self) 返回安卓设备可用的输入法</span></span><br><span class="line">f = driver.available_ime_engines</span><br><span class="line"><span class="comment"># is_ime_active(self) 检查设备是否有输入法服务活动。返回真/假。</span></span><br><span class="line">g = driver.is_ime_active()</span><br><span class="line"><span class="comment"># activate_ime_engine(self, engine) 激活安卓设备中的指定输入法，设备可用输入法可以从“available_ime_engines”获取</span></span><br><span class="line">driver.activate_ime_engine(<span class="string">'com.android.inputmethod.latin/.LatinIME'</span>)</span><br><span class="line"><span class="comment"># deactivate_ime_engine(self) 关闭安卓设备当前的输入法</span></span><br><span class="line">driver.deactivate_ime_engine()</span><br><span class="line"><span class="comment"># active_ime_engine(self) 返回当前输入法的包名</span></span><br><span class="line">h = driver.active_ime_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># toggle_location_services(self) 打开安卓设备上的位置定位设置</span></span><br><span class="line">driver.toggle_location_services()</span><br><span class="line"><span class="comment"># set_location(self, latitude, longtitude, altitude) 设置设备的经纬度</span></span><br><span class="line">driver.set_location(<span class="number">60</span>, <span class="number">120</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tag_name(self) 返回元素的tagName属性, 经实践返回的是class name</span></span><br><span class="line">i = driver.find_element_by_id(<span class="string">'id'</span>).tag_name</span><br><span class="line"><span class="comment"># text(self) 返回元素的文本值</span></span><br><span class="line">j = driver.find_element_by_name(<span class="string">'name'</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># click(self) 点击元素</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">'class_name'</span>).click()</span><br><span class="line"><span class="comment"># submit(self) 提交表单</span></span><br><span class="line">driver.find_element_by_accessibility_id(<span class="string">'id'</span>).submit()</span><br><span class="line"><span class="comment"># clear(self) 清除输入的内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_attribute(self, name) 可获取：字符串类型（name, text, className, resourceId）,</span></span><br><span class="line"><span class="comment"># 布尔类型（如果无特殊说明， get_attribute 里面使用的属性名称和 uiautomatorviewer 里面的一致）</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).get_attribute(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># is_selected(self) 返回元素是否选择。可以用来检查一个复选框或单选按钮被选中。</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).is_selected()</span><br><span class="line"><span class="comment"># is_enabled(self) 返回元素是否可用 True / False</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).is_enabled()</span><br><span class="line"><span class="comment"># is_displayed(self) 此元素用户是否可见。简单地说就是隐藏元素和被控件挡住无法操作的元素</span></span><br><span class="line"><span class="comment"># （仅限 Selenium，appium是否实现了类似功能不是太确定）</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).is_displayed()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># send_keys(self, *value) 在元素中模拟输入（开启appium自带的输入法并配置了appium输入法后，可以输入中英文）</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'id'</span>).send_keys(<span class="string">'haha'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># size(self) 获取元素的大小（高和宽）</span></span><br><span class="line">k = driver.find_element_by_id(<span class="string">'id'</span>).size</span><br><span class="line"></span><br><span class="line"><span class="comment"># value_of_css_property(self, property_name) CSS属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># location(self) 获取元素左上角的坐标</span></span><br><span class="line">m = driver.find_element_by_id(<span class="string">'id'</span>).location</span><br><span class="line"></span><br><span class="line"><span class="comment"># rect(self) 元素的大小和位置的字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># screenshot_as_base64(self) 获取当前元素的截图为Base64编码的字符串</span></span><br><span class="line">img = driver.find_element_by_id(<span class="string">'id'</span>).screenshot_as_base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute_script(self, script, *args) 在当前窗口/框架（特指 Html 的 iframe ）同步执行 javascript 代码。</span></span><br><span class="line"><span class="comment"># 你可以理解为如果这段代码是睡眠5秒，这五秒内主线程的 javascript 不会执行</span></span><br><span class="line">driver.execute_script(<span class="string">'document.title'</span>)</span><br><span class="line"><span class="comment"># execute_async_script(self, script, *args) 插入 javascript 代码，只是这个是异步的，</span></span><br><span class="line"><span class="comment"># 也就是如果你的代码是睡眠5秒，那么你只是自己在睡，页面的其他 javascript 代码还是照常执行</span></span><br><span class="line">driver.execute_async_script(<span class="string">'document.title'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># current_url(self) 获取当前页面的网址。</span></span><br><span class="line">n = driver.current_url</span><br><span class="line"><span class="comment"># page_source(self) 获取当前页面的源。</span></span><br><span class="line">o = driver.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># close(self) 关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># quit(self) 退出脚本运行并关闭每个相关的窗口连接</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h1 id="5-appium多设备并行"><a href="#5-appium多设备并行" class="headerlink" title="5.appium多设备并行"></a>5.appium多设备并行</h1><p>实例：多线程实现多设备并发运行</p><ol><li>使用adb命令连接多台移动设备</li><li>通过yaml文件管理不同设备配置参数</li></ol><p>其中bootstrap_port表示bootstrap绑定的端口，多个appium启动连接多个android设备时需要设置不同的 bootstrap-port</p><p>udid为设备id</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- desc:</span> <span class="string">设备名称_夜神,appium启动服务端口号_4723</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">4723</span></span><br><span class="line"><span class="attr">  bootstrap_port:</span> <span class="number">4724</span></span><br><span class="line"><span class="attr">  desired_caps:</span></span><br><span class="line"><span class="attr">    platformName:</span> <span class="string">Android</span></span><br><span class="line"><span class="attr">    deviceName:</span> <span class="string">夜神</span></span><br><span class="line"><span class="attr">    appPackage:</span> <span class="string">video.like</span></span><br><span class="line"><span class="attr">    noReset:</span>  <span class="type">!!bool</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">    udid:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:62001</span></span><br><span class="line"><span class="attr">    appActivity:</span> <span class="string">com.yy.iheima.startup.MainActivity</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- desc:</span> <span class="string">设备名称_夜神1,appium启动服务端口号_4730</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">4730</span></span><br><span class="line"><span class="attr">  bootstrap_port:</span> <span class="number">4731</span></span><br><span class="line"><span class="attr">  desired_caps:</span></span><br><span class="line"><span class="attr">    platformName:</span> <span class="string">Android</span></span><br><span class="line"><span class="attr">    deviceName:</span> <span class="string">夜神1</span></span><br><span class="line"><span class="attr">    appPackage:</span> <span class="string">video.like</span></span><br><span class="line"><span class="attr">    noReset:</span>  <span class="type">!!bool</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">    udid:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:62025</span></span><br><span class="line"><span class="attr">    appActivity:</span> <span class="string">com.yy.iheima.startup.MainActivity</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#- desc: 设备名称_xiaomi,appium启动服务端口号_4740</span></span><br><span class="line"><span class="comment">#  port: 4740</span></span><br><span class="line"><span class="comment">#  bootstrap_port: 4741</span></span><br><span class="line"><span class="comment">#  desired_caps:</span></span><br><span class="line"><span class="comment">#    platformName: Android</span></span><br><span class="line"><span class="comment">#    deviceName: xiaomi</span></span><br><span class="line"><span class="comment">#    appPackage: video.like</span></span><br><span class="line"><span class="comment">#    noReset:  !!bool True</span></span><br><span class="line"><span class="comment">#    udid: 33eee1b77ce3</span></span><br><span class="line"><span class="comment">#    appActivity: com.yy.iheima.startup.MainActivity</span></span><br></pre></td></tr></table></figure><ol start="3"><li>运行代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_appium</span><span class="params">(port=<span class="number">4723</span>)</span>:</span></span><br><span class="line">    <span class="string">'''关闭appium服务'''</span></span><br><span class="line">    p = os.popen(<span class="string">f'netstat  -aon|findstr <span class="subst">&#123;port&#125;</span>'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    p0 = p.read().strip().split(<span class="string">'\n'</span>)[<span class="number">0</span>]</span><br><span class="line">    print(p0)</span><br><span class="line">    <span class="keyword">if</span> p0 != <span class="string">''</span> <span class="keyword">and</span> <span class="string">'LISTENING'</span> <span class="keyword">in</span> p0:</span><br><span class="line">        p1 = int(p0.split(<span class="string">'LISTENING'</span>)[<span class="number">1</span>].strip())  <span class="comment"># 获取进程号</span></span><br><span class="line">        print(p1)</span><br><span class="line">        os.popen(<span class="string">f'taskkill /F /PID <span class="subst">&#123;p1&#125;</span>'</span>)  <span class="comment"># 结束进程</span></span><br><span class="line">        print(<span class="string">'appium server已结束'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_appium</span><span class="params">(port=<span class="number">4723</span>, bootstrap=<span class="number">4724</span>, udid=<span class="string">"127.0.0.1:62001"</span>)</span>:</span></span><br><span class="line">    <span class="string">'''开启appium服务'''</span></span><br><span class="line">    stop_appium(port)  <span class="comment"># 先判断端口是否被占用，如果被占用则关闭该端口号</span></span><br><span class="line">    stop_appium(bootstrap)  <span class="comment"># 先判断端口是否被占用，如果被占用则关闭该端口号</span></span><br><span class="line">    <span class="comment"># 根据系统，启动对应的服务</span></span><br><span class="line">    <span class="comment"># cmd = f'start /b appium -a 127.0.0.1 -p &#123;port&#125; -U &#123;udid&#125; --automation-name Appium --session-override --log D:\appium_log.log'</span></span><br><span class="line">    cmd = <span class="string">r"start /b node D:\software\Appium\node_modules\appium\lib\server\main.js --address 127.0.0.1 --port %s -bp %s -U %s --platform-name Android --automation-name Appium --session-override --log D:\appium_log.log"</span> % (</span><br><span class="line">        port, bootstrap, udid)</span><br><span class="line">    <span class="comment"># -U 指定一个设备名称（adb devices可以查看）</span></span><br><span class="line">    print(cmd)</span><br><span class="line">    os.system(cmd)</span><br><span class="line">    time.sleep(<span class="number">8</span>)  <span class="comment"># 等待启动完成</span></span><br><span class="line">    print(<span class="string">'appium启动成功'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_desired_caps</span><span class="params">(devicesName=<span class="string">'夜神'</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    从yaml读取desired_caps配置信息</span></span><br><span class="line"><span class="string">    参数name:设备名称,如：夜神/雷电</span></span><br><span class="line"><span class="string">    :return: desired_caps字典格式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    curpath = os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">    yamlpath = os.path.join(curpath, <span class="string">"devices.yaml"</span>)</span><br><span class="line">    print(<span class="string">"配置地址：%s"</span> % yamlpath)</span><br><span class="line">    f = open(yamlpath, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    a = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment"># 把yaml文件转字典</span></span><br><span class="line">    d = yaml.load(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">        <span class="keyword">if</span> devicesName <span class="keyword">in</span> i[<span class="string">"desc"</span>]:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="comment"># 启动服务</span></span><br><span class="line">            devicesid = i[<span class="string">'desired_caps'</span>][<span class="string">'udid'</span>]</span><br><span class="line">            print(devicesid)</span><br><span class="line">            start_appium(port=i[<span class="string">'port'</span>], bootstrap=i[<span class="string">'bootstrap_port'</span>], udid=devicesid)</span><br><span class="line">            <span class="keyword">return</span> (i[<span class="string">'desired_caps'</span>], i[<span class="string">'port'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_app</span><span class="params">(devicesName)</span>:</span></span><br><span class="line">    <span class="comment"># 配置参数</span></span><br><span class="line">    desired_caps = get_desired_caps(devicesName)</span><br><span class="line">    print(desired_caps)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行代码</span></span><br><span class="line">    driver = webdriver.Remote(<span class="string">'http://127.0.0.1:%s/wd/hub'</span> % desired_caps[<span class="number">1</span>], desired_caps[<span class="number">0</span>])</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 点击搜索按钮进入搜索页</span></span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">30</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.XPATH,</span><br><span class="line">                                               <span class="string">'//*[@resource-id="video.like:id/tab_layout"]/android.widget.LinearLayout/android.widget.RelativeLayout[2]'</span>))).click()</span><br><span class="line">    <span class="comment"># 选中搜索框</span></span><br><span class="line">    wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@resource-id="video.like:id/btn_search"]'</span>))).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入关键字进行搜索</span></span><br><span class="line">    search = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.XPATH, <span class="string">'//*[@resource-id="video.like:id/search_et"]'</span>)))</span><br><span class="line">    search.set_text(<span class="string">'sofiarach'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">muti_run</span><span class="params">(devices)</span>:</span></span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(devices)):</span><br><span class="line">        t = threading.Thread(target=run_app, args=(devices[i],))</span><br><span class="line">        t.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">        t.start()</span><br><span class="line">        t_list.append(t)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    devices = [<span class="string">"夜神"</span>, <span class="string">"夜神1"</span>]</span><br><span class="line">    muti_run(devices)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据可视化工具</title>
      <link href="/2018/05/25/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/05/25/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;大数据时代,拥有数据就拥有一切,python作为强大的数据分析利器,在数据分析领域独领风骚,下面介绍一个很好的数据可视化工具.</p><h2 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h2><p>&#160; &#160; &#160; &#160;Echarts是一个使用 JavaScript实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，<br>Firefox，Safari等），提供直观，交互丰富，可高度个性化定制的数据可视化图表。提供了常规的折线图、柱状图、散点图、饼图、K线图，<br>用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap。</p><a id="more"></a><p>特点:</p><ul><li>1.基于HTML5的图形库,图形的创建也比较简单，直接引用JS即可</li><li>2.百度的项目，而且一直有更新，目前最新的是EChart 4.1.0；</li><li>3.项目文档比较详细，而且是中文的，理解比较容易；</li><li>4.支持的图形很丰富，并且可以直接切换图形，使用起来非常方便</li></ul><p>使用:<br>&#160; &#160; &#160; &#160;官网下载echarts.js引入即可使用.</p><p>ECharts首页:<br>&#160; &#160; &#160; &#160;<a href="http://echarts.baidu.com" target="_blank" rel="noopener">http://echarts.baidu.com</a></p><h2 id="pyecharts"><a href="#pyecharts" class="headerlink" title="pyecharts"></a>pyecharts</h2><p>&#160; &#160; &#160; &#160;pyecharts 是一个用于生成 Echarts 图表的Python类库,可以实现在 Python 中直接使用数据生成图表</p><p>特点:</p><ul><li>1.操作简单使用方便</li><li>2.语言翻译扩展pyecharts-javascripthon可以实现将python3.5+代码转换为JS代码</li><li>3.支持在Jupyter Notebook,Flask,Django平台中使用 (目前最新版本0.5.8)</li></ul><p>使用:<br>&#160; &#160; &#160; &#160;pip install pyecharts</p><p>pyecharts主页:<br>&#160; &#160; &#160; &#160;<a href="http://pyecharts.org" target="_blank" rel="noopener">http://pyecharts.org</a></p><h3 id="可以展示的图表类型"><a href="#可以展示的图表类型" class="headerlink" title="可以展示的图表类型:"></a>可以展示的图表类型:</h3><pre><code>Bar（柱状图/条形图）Bar3D（3D 柱状图）Boxplot（箱形图）EffectScatter（带有涟漪特效动画的散点图）Funnel（漏斗图）Gauge（仪表盘）Geo（地理坐标系）GeoLines（地理坐标系线图）Graph（关系图）HeatMap（热力图）Kline/Candlestick（K线图）Line（折线/面积图）Line3D（3D 折线图）Liquid（水球图）Map（地图）Parallel（平行坐标系）Pie（饼图）Polar（极坐标系）Radar（雷达图）Sankey（桑基图）Scatter（散点图）Scatter3D（3D 散点图）ThemeRiver（主题河流图）Tree（树图）TreeMap（矩形树图）WordCloud（词云图）</code></pre><h3 id="1-折线图"><a href="#1-折线图" class="headerlink" title="1. 折线图"></a>1. 折线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> online</span><br><span class="line"></span><br><span class="line">online()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Line</span><br><span class="line"></span><br><span class="line">attr = [<span class="string">'周一'</span>, <span class="string">'周二'</span>, <span class="string">'周三'</span>, <span class="string">'周四'</span>, <span class="string">'周五'</span>, <span class="string">'周六'</span>, <span class="string">'周日'</span>]</span><br><span class="line">line = Line(<span class="string">"折线图示例"</span>)</span><br><span class="line">line.add(</span><br><span class="line">    <span class="string">"最高气温"</span>,</span><br><span class="line">    attr,</span><br><span class="line">    [<span class="number">11</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>],</span><br><span class="line">    mark_point=[<span class="string">"max"</span>, <span class="string">"min"</span>],</span><br><span class="line">    mark_line=[<span class="string">"average"</span>],</span><br><span class="line">)</span><br><span class="line">line.add(</span><br><span class="line">    <span class="string">"最低气温"</span>,</span><br><span class="line">    attr,</span><br><span class="line">    [<span class="number">1</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">    mark_point=[<span class="string">"max"</span>, <span class="string">"min"</span>],</span><br><span class="line">    mark_line=[<span class="string">"average"</span>],</span><br><span class="line">    yaxis_formatter=<span class="string">"°C"</span>,</span><br><span class="line">)</span><br><span class="line">line</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/line.html" target="_blank">折线图</a></p><h3 id="2-柱状图"><a href="#2-柱状图" class="headerlink" title="2. 柱状图"></a>2. 柱状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">attr = [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, <span class="string">"袜子"</span>]</span><br><span class="line">v1 = [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">75</span>, <span class="number">90</span>]</span><br><span class="line">v2 = [<span class="number">10</span>, <span class="number">25</span>, <span class="number">8</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">80</span>]</span><br><span class="line">bar = Bar(<span class="string">"柱状图数据堆叠"</span>)</span><br><span class="line">bar.add(<span class="string">"商家A"</span>, attr, v1, is_stack=<span class="keyword">True</span>)</span><br><span class="line">bar.add(<span class="string">"商家B"</span>, attr, v2, is_stack=<span class="keyword">True</span>)</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/bar.html" target="_blank">柱状图数据堆叠</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar = Bar(<span class="string">"x 轴和 y 轴交换"</span>)</span><br><span class="line">bar.add(<span class="string">"商家A"</span>, attr, v1)</span><br><span class="line">bar.add(<span class="string">"商家B"</span>, attr, v2, is_convert=<span class="keyword">True</span>)</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/bar2.html" target="_blank">x 轴和 y 轴交换柱状图</a></p><h3 id="3-Bar3D-3D柱状图"><a href="#3-Bar3D-3D柱状图" class="headerlink" title="3. Bar3D (3D柱状图)"></a>3. Bar3D (3D柱状图)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar3D</span><br><span class="line"></span><br><span class="line">bar3d = Bar3D(<span class="string">"3D 柱状图"</span>, width=<span class="number">900</span>, height=<span class="number">600</span>)</span><br><span class="line">x_axis = [</span><br><span class="line">    <span class="string">"12a"</span>, <span class="string">"1a"</span>, <span class="string">"2a"</span>, <span class="string">"3a"</span>, <span class="string">"4a"</span>, <span class="string">"5a"</span>, <span class="string">"6a"</span>, <span class="string">"7a"</span>, <span class="string">"8a"</span>, <span class="string">"9a"</span>, <span class="string">"10a"</span>, <span class="string">"11a"</span>,</span><br><span class="line">    <span class="string">"12p"</span>, <span class="string">"1p"</span>, <span class="string">"2p"</span>, <span class="string">"3p"</span>, <span class="string">"4p"</span>, <span class="string">"5p"</span>, <span class="string">"6p"</span>, <span class="string">"7p"</span>, <span class="string">"8p"</span>, <span class="string">"9p"</span>, <span class="string">"10p"</span>, <span class="string">"11p"</span></span><br><span class="line">    ]</span><br><span class="line">y_axis = [</span><br><span class="line">    <span class="string">"Saturday"</span>, <span class="string">"Friday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Monday"</span>, <span class="string">"Sunday"</span></span><br><span class="line">    ]</span><br><span class="line">data = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">12</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">13</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">14</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">15</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">16</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">17</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">18</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">19</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">20</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">21</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">23</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">12</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">13</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">14</span>, <span class="number">9</span>], [<span class="number">1</span>, <span class="number">15</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">17</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">18</span>, <span class="number">8</span>], [<span class="number">1</span>, <span class="number">19</span>, <span class="number">12</span>], [<span class="number">1</span>, <span class="number">20</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">21</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">22</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">23</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">13</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">14</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">15</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">16</span>, <span class="number">6</span>], [<span class="number">2</span>, <span class="number">17</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">18</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">19</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">20</span>, <span class="number">7</span>], [<span class="number">2</span>, <span class="number">21</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">22</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>], [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">11</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">12</span>, <span class="number">7</span>], [<span class="number">3</span>, <span class="number">13</span>, <span class="number">14</span>], [<span class="number">3</span>, <span class="number">14</span>, <span class="number">13</span>], [<span class="number">3</span>, <span class="number">15</span>, <span class="number">12</span>], [<span class="number">3</span>, <span class="number">16</span>, <span class="number">9</span>], [<span class="number">3</span>, <span class="number">17</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">18</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">19</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">20</span>, <span class="number">6</span>], [<span class="number">3</span>, <span class="number">21</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">22</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">23</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">10</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">11</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">12</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">13</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">14</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>], [<span class="number">4</span>, <span class="number">16</span>, <span class="number">12</span>], [<span class="number">4</span>, <span class="number">17</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">18</span>, <span class="number">8</span>], [<span class="number">4</span>, <span class="number">19</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">20</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">21</span>, <span class="number">7</span>], [<span class="number">4</span>, <span class="number">22</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">23</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">11</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">13</span>, <span class="number">10</span>], [<span class="number">5</span>, <span class="number">14</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">15</span>, <span class="number">7</span>], [<span class="number">5</span>, <span class="number">16</span>, <span class="number">11</span>], [<span class="number">5</span>, <span class="number">17</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">18</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">19</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">20</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">21</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">22</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">23</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">4</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">6</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">12</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">13</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">14</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">15</span>, <span class="number">4</span>], [<span class="number">6</span>, <span class="number">16</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">17</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">18</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">19</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">20</span>, <span class="number">1</span>], [<span class="number">6</span>, <span class="number">21</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">22</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">23</span>, <span class="number">6</span>]</span><br><span class="line">    ]</span><br><span class="line">range_color = [<span class="string">'#313695'</span>, <span class="string">'#4575b4'</span>, <span class="string">'#74add1'</span>, <span class="string">'#abd9e9'</span>, <span class="string">'#e0f3f8'</span>, <span class="string">'#ffffbf'</span>,</span><br><span class="line">               <span class="string">'#fee090'</span>, <span class="string">'#fdae61'</span>, <span class="string">'#f46d43'</span>, <span class="string">'#d73027'</span>, <span class="string">'#a50026'</span>]</span><br><span class="line">bar3d.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    x_axis,</span><br><span class="line">    y_axis,</span><br><span class="line">    [[d[<span class="number">1</span>], d[<span class="number">0</span>], d[<span class="number">2</span>]] <span class="keyword">for</span> d <span class="keyword">in</span> data],</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">    visual_range=[<span class="number">0</span>, <span class="number">20</span>],</span><br><span class="line">    visual_range_color=range_color,</span><br><span class="line">    grid3d_width=<span class="number">200</span>,</span><br><span class="line">    grid3d_depth=<span class="number">80</span>,</span><br><span class="line">)</span><br><span class="line">bar3d</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/pyecharts_img/3D 柱状图.png" style="width:600px;height:340px;"></p><h3 id="4-饼状图"><a href="#4-饼状图" class="headerlink" title="4.饼状图"></a>4.饼状图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">attr = [<span class="string">"衬衫"</span>, <span class="string">"羊毛衫"</span>, <span class="string">"雪纺衫"</span>, <span class="string">"裤子"</span>, <span class="string">"高跟鞋"</span>, <span class="string">"袜子"</span>]</span><br><span class="line">v1 = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line">pie = Pie(<span class="string">"饼图示例"</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, attr, v1, is_label_show=<span class="keyword">True</span>)</span><br><span class="line">pie</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/pie.html" target="_blank">饼图</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">pie = Pie(<span class="string">'各类电影中"好片"所占的比例'</span>, <span class="string">"数据来着豆瓣"</span>, title_pos=<span class="string">'center'</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"剧情"</span>, <span class="string">""</span>], [<span class="number">25</span>, <span class="number">75</span>], center=[<span class="number">10</span>, <span class="number">30</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>, )</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"奇幻"</span>, <span class="string">""</span>], [<span class="number">24</span>, <span class="number">76</span>], center=[<span class="number">30</span>, <span class="number">30</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>, legend_pos=<span class="string">'left'</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"爱情"</span>, <span class="string">""</span>], [<span class="number">14</span>, <span class="number">86</span>], center=[<span class="number">50</span>, <span class="number">30</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"惊悚"</span>, <span class="string">""</span>], [<span class="number">11</span>, <span class="number">89</span>], center=[<span class="number">70</span>, <span class="number">30</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"冒险"</span>, <span class="string">""</span>], [<span class="number">27</span>, <span class="number">73</span>], center=[<span class="number">90</span>, <span class="number">30</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"动作"</span>, <span class="string">""</span>], [<span class="number">15</span>, <span class="number">85</span>], center=[<span class="number">10</span>, <span class="number">70</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"喜剧"</span>, <span class="string">""</span>], [<span class="number">54</span>, <span class="number">46</span>], center=[<span class="number">30</span>, <span class="number">70</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"科幻"</span>, <span class="string">""</span>], [<span class="number">26</span>, <span class="number">74</span>], center=[<span class="number">50</span>, <span class="number">70</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"悬疑"</span>, <span class="string">""</span>], [<span class="number">25</span>, <span class="number">75</span>], center=[<span class="number">70</span>, <span class="number">70</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, [<span class="string">"犯罪"</span>, <span class="string">""</span>], [<span class="number">28</span>, <span class="number">72</span>], center=[<span class="number">90</span>, <span class="number">70</span>], radius=[<span class="number">18</span>, <span class="number">24</span>], label_pos=<span class="string">'center'</span>, is_label_show=<span class="keyword">True</span>,</span><br><span class="line">        label_text_color=<span class="keyword">None</span>, is_legend_show=<span class="keyword">True</span>, legend_top=<span class="string">"center"</span>)</span><br><span class="line"><span class="comment"># pie.show_config()</span></span><br><span class="line">pie</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/pie2.html" target="_blank">组合饼图</a></p><h3 id="5-散点图"><a href="#5-散点图" class="headerlink" title="5. 散点图"></a>5. 散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Scatter</span><br><span class="line"></span><br><span class="line">v1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">v2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">scatter = Scatter(<span class="string">"散点图"</span>)</span><br><span class="line">scatter.add(<span class="string">"A"</span>, v1, v2)</span><br><span class="line">scatter.add(</span><br><span class="line">    <span class="string">"B"</span>,</span><br><span class="line">    v1[::<span class="number">-1</span>],</span><br><span class="line">    v2,</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">    visual_type=<span class="string">"size"</span>,</span><br><span class="line">    visual_range_size=[<span class="number">20</span>, <span class="number">80</span>],</span><br><span class="line">)</span><br><span class="line">scatter</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/scatter.html" target="_blank">散点图</a></p><h3 id="6-gauge（仪表盘）"><a href="#6-gauge（仪表盘）" class="headerlink" title="6.  gauge（仪表盘）"></a>6.  gauge（仪表盘）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Gauge</span><br><span class="line"></span><br><span class="line">gauge = Gauge(<span class="string">"仪表盘示例"</span>)</span><br><span class="line">gauge.add(<span class="string">"业务指标"</span>, <span class="string">"完成率"</span>, <span class="number">66.66</span>)</span><br><span class="line">gauge</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/gauge.html" target="_blank">仪表盘图</a></p><h3 id="7-关系图"><a href="#7-关系图" class="headerlink" title="7. 关系图"></a>7. 关系图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(os.path.join(<span class="string">"fixtures"</span>, <span class="string">"weibo.json"</span>), <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    j = json.load(f)</span><br><span class="line">    nodes, links, categories, cont, mid, userl = j</span><br><span class="line">graph = Graph(<span class="string">"微博转发关系图"</span>, width=<span class="number">900</span>, height=<span class="number">600</span>)</span><br><span class="line">graph.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    nodes,</span><br><span class="line">    links,</span><br><span class="line">    categories,</span><br><span class="line">    label_pos=<span class="string">"right"</span>,</span><br><span class="line">    graph_repulsion=<span class="number">50</span>,</span><br><span class="line">    is_legend_show=<span class="keyword">False</span>,</span><br><span class="line">    line_curve=<span class="number">0.2</span>,</span><br><span class="line">    label_text_color=<span class="keyword">None</span>,</span><br><span class="line">)</span><br><span class="line">graph</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/graph.html" target="_blank">微博转发关系图</a></p><h3 id="8-热力图"><a href="#8-热力图" class="headerlink" title="8. 热力图"></a>8. 热力图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> HeatMap</span><br><span class="line"></span><br><span class="line">begin = datetime.date(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2017</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line">data = [</span><br><span class="line">    [str(begin + datetime.timedelta(days=i)), random.randint(<span class="number">1000</span>, <span class="number">25000</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((end - begin).days + <span class="number">1</span>)</span><br><span class="line">]</span><br><span class="line">heatmap = HeatMap(<span class="string">"日历热力图示例"</span>, <span class="string">"某人 2017 年微信步数情况"</span>, width=<span class="number">900</span>)</span><br><span class="line">heatmap.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    data,</span><br><span class="line">    is_calendar_heatmap=<span class="keyword">True</span>,</span><br><span class="line">    visual_text_color=<span class="string">"#000"</span>,</span><br><span class="line">    visual_range_text=[<span class="string">""</span>, <span class="string">""</span>],</span><br><span class="line">    visual_range=[<span class="number">1000</span>, <span class="number">25000</span>],</span><br><span class="line">    calendar_cell_size=[<span class="string">"auto"</span>, <span class="number">30</span>],</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">    calendar_date_range=<span class="string">"2017"</span>,</span><br><span class="line">    visual_orient=<span class="string">"horizontal"</span>,</span><br><span class="line">    visual_pos=<span class="string">"center"</span>,</span><br><span class="line">    visual_top=<span class="string">"80%"</span>,</span><br><span class="line">    is_piecewise=<span class="keyword">True</span>,</span><br><span class="line">)</span><br><span class="line">heatmap</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/heatmap.html" target="_blank">日历热力图</a></p><h3 id="9-K-线图"><a href="#9-K-线图" class="headerlink" title="9. K 线图"></a>9. K 线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Kline</span><br><span class="line"></span><br><span class="line">v1 = [[<span class="number">2320.26</span>, <span class="number">2320.26</span>, <span class="number">2287.3</span>, <span class="number">2362.94</span>], [<span class="number">2300</span>, <span class="number">2291.3</span>, <span class="number">2288.26</span>, <span class="number">2308.38</span>],</span><br><span class="line">      [<span class="number">2295.35</span>, <span class="number">2346.5</span>, <span class="number">2295.35</span>, <span class="number">2345.92</span>], [<span class="number">2347.22</span>, <span class="number">2358.98</span>, <span class="number">2337.35</span>, <span class="number">2363.8</span>],</span><br><span class="line">      [<span class="number">2360.75</span>, <span class="number">2382.48</span>, <span class="number">2347.89</span>, <span class="number">2383.76</span>], [<span class="number">2383.43</span>, <span class="number">2385.42</span>, <span class="number">2371.23</span>, <span class="number">2391.82</span>],</span><br><span class="line">      [<span class="number">2377.41</span>, <span class="number">2419.02</span>, <span class="number">2369.57</span>, <span class="number">2421.15</span>], [<span class="number">2425.92</span>, <span class="number">2428.15</span>, <span class="number">2417.58</span>, <span class="number">2440.38</span>],</span><br><span class="line">      [<span class="number">2411</span>, <span class="number">2433.13</span>, <span class="number">2403.3</span>, <span class="number">2437.42</span>], [<span class="number">2432.68</span>, <span class="number">2334.48</span>, <span class="number">2427.7</span>, <span class="number">2441.73</span>],</span><br><span class="line">      [<span class="number">2430.69</span>, <span class="number">2418.53</span>, <span class="number">2394.22</span>, <span class="number">2433.89</span>], [<span class="number">2416.62</span>, <span class="number">2432.4</span>, <span class="number">2414.4</span>, <span class="number">2443.03</span>],</span><br><span class="line">      [<span class="number">2441.91</span>, <span class="number">2421.56</span>, <span class="number">2418.43</span>, <span class="number">2444.8</span>], [<span class="number">2420.26</span>, <span class="number">2382.91</span>, <span class="number">2373.53</span>, <span class="number">2427.07</span>],</span><br><span class="line">      [<span class="number">2383.49</span>, <span class="number">2397.18</span>, <span class="number">2370.61</span>, <span class="number">2397.94</span>], [<span class="number">2378.82</span>, <span class="number">2325.95</span>, <span class="number">2309.17</span>, <span class="number">2378.82</span>],</span><br><span class="line">      [<span class="number">2322.94</span>, <span class="number">2314.16</span>, <span class="number">2308.76</span>, <span class="number">2330.88</span>], [<span class="number">2320.62</span>, <span class="number">2325.82</span>, <span class="number">2315.01</span>, <span class="number">2338.78</span>],</span><br><span class="line">      [<span class="number">2313.74</span>, <span class="number">2293.34</span>, <span class="number">2289.89</span>, <span class="number">2340.71</span>], [<span class="number">2297.77</span>, <span class="number">2313.22</span>, <span class="number">2292.03</span>, <span class="number">2324.63</span>],</span><br><span class="line">      [<span class="number">2322.32</span>, <span class="number">2365.59</span>, <span class="number">2308.92</span>, <span class="number">2366.16</span>], [<span class="number">2364.54</span>, <span class="number">2359.51</span>, <span class="number">2330.86</span>, <span class="number">2369.65</span>],</span><br><span class="line">      [<span class="number">2332.08</span>, <span class="number">2273.4</span>, <span class="number">2259.25</span>, <span class="number">2333.54</span>], [<span class="number">2274.81</span>, <span class="number">2326.31</span>, <span class="number">2270.1</span>, <span class="number">2328.14</span>],</span><br><span class="line">      [<span class="number">2333.61</span>, <span class="number">2347.18</span>, <span class="number">2321.6</span>, <span class="number">2351.44</span>], [<span class="number">2340.44</span>, <span class="number">2324.29</span>, <span class="number">2304.27</span>, <span class="number">2352.02</span>],</span><br><span class="line">      [<span class="number">2326.42</span>, <span class="number">2318.61</span>, <span class="number">2314.59</span>, <span class="number">2333.67</span>], [<span class="number">2314.68</span>, <span class="number">2310.59</span>, <span class="number">2296.58</span>, <span class="number">2320.96</span>],</span><br><span class="line">      [<span class="number">2309.16</span>, <span class="number">2286.6</span>, <span class="number">2264.83</span>, <span class="number">2333.29</span>], [<span class="number">2282.17</span>, <span class="number">2263.97</span>, <span class="number">2253.25</span>, <span class="number">2286.33</span>],</span><br><span class="line">      [<span class="number">2255.77</span>, <span class="number">2270.28</span>, <span class="number">2253.31</span>, <span class="number">2276.22</span>]]</span><br><span class="line">kline = Kline(<span class="string">"K 线图示例"</span>)</span><br><span class="line">kline.add(<span class="string">"日K"</span>, [<span class="string">"2017/7/&#123;&#125;"</span>.format(i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>)], v1)</span><br><span class="line">kline</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/kline.html" target="_blank">K 线图</a></p><h3 id="10-Map-地图"><a href="#10-Map-地图" class="headerlink" title="10. Map (地图)"></a>10. Map (地图)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Map</span><br><span class="line"></span><br><span class="line">value = [<span class="number">155</span>, <span class="number">10</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">33</span>, <span class="number">80</span>, <span class="number">190</span>, <span class="number">53</span>, <span class="number">49.6</span>]</span><br><span class="line">attr = [</span><br><span class="line">    <span class="string">"福建"</span>, <span class="string">"山东"</span>, <span class="string">"北京"</span>, <span class="string">"上海"</span>, <span class="string">"甘肃"</span>, <span class="string">"新疆"</span>, <span class="string">"河南"</span>, <span class="string">"广西"</span>, <span class="string">"西藏"</span></span><br><span class="line">    ]</span><br><span class="line">map = Map(<span class="string">"Map 结合 VisualMap 示例"</span>, width=<span class="number">1000</span>, height=<span class="number">600</span>)</span><br><span class="line">map.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    attr,</span><br><span class="line">    value,</span><br><span class="line">    maptype=<span class="string">"china"</span>,</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">    visual_text_color=<span class="string">"#000"</span>,</span><br><span class="line">)</span><br><span class="line">map</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/pyecharts_img/Map 结合 VisualMap 示例.png" style="width:600px;height:340px;"></p><h3 id="11-词云图"><a href="#11-词云图" class="headerlink" title="11.词云图"></a>11.词云图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> WordCloud</span><br><span class="line"></span><br><span class="line">name = [</span><br><span class="line">    <span class="string">'Sam S Club'</span>, <span class="string">'Macys'</span>, <span class="string">'Amy Schumer'</span>, <span class="string">'Jurassic World'</span>, <span class="string">'Charter Communications'</span>,</span><br><span class="line">    <span class="string">'Chick Fil A'</span>, <span class="string">'Planet Fitness'</span>, <span class="string">'Pitch Perfect'</span>, <span class="string">'Express'</span>, <span class="string">'Home'</span>, <span class="string">'Johnny Depp'</span>,</span><br><span class="line">    <span class="string">'Lena Dunham'</span>, <span class="string">'Lewis Hamilton'</span>, <span class="string">'KXAN'</span>, <span class="string">'Mary Ellen Mark'</span>, <span class="string">'Farrah Abraham'</span>,</span><br><span class="line">    <span class="string">'Rita Ora'</span>, <span class="string">'Serena Williams'</span>, <span class="string">'NCAA baseball tournament'</span>, <span class="string">'Point Break'</span>]</span><br><span class="line">value = [</span><br><span class="line">    <span class="number">10000</span>, <span class="number">6181</span>, <span class="number">4386</span>, <span class="number">4055</span>, <span class="number">2467</span>, <span class="number">2244</span>, <span class="number">1898</span>, <span class="number">1484</span>, <span class="number">1112</span>,</span><br><span class="line">    <span class="number">965</span>, <span class="number">847</span>, <span class="number">582</span>, <span class="number">555</span>, <span class="number">550</span>, <span class="number">462</span>, <span class="number">366</span>, <span class="number">360</span>, <span class="number">282</span>, <span class="number">273</span>, <span class="number">265</span>]</span><br><span class="line">wordcloud = WordCloud(width=<span class="number">900</span>, height=<span class="number">620</span>)</span><br><span class="line">wordcloud.add(<span class="string">""</span>, name, value, word_size_range=[<span class="number">20</span>, <span class="number">100</span>])</span><br><span class="line">wordcloud</span><br></pre></td></tr></table></figure><p><a href="/assets/html/pyecharts/wordcloud.html" target="_blank">词云图</a></p><h3 id="12-Geo（地理坐标系）"><a href="#12-Geo（地理坐标系）" class="headerlink" title="12. Geo（地理坐标系）"></a>12. Geo（地理坐标系）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Geo</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">"海门"</span>, <span class="number">9</span>),(<span class="string">"鄂尔多斯"</span>, <span class="number">12</span>),(<span class="string">"招远"</span>, <span class="number">12</span>),(<span class="string">"舟山"</span>, <span class="number">12</span>),(<span class="string">"齐齐哈尔"</span>, <span class="number">14</span>),(<span class="string">"盐城"</span>, <span class="number">15</span>),</span><br><span class="line">    (<span class="string">"赤峰"</span>, <span class="number">16</span>),(<span class="string">"青岛"</span>, <span class="number">18</span>),(<span class="string">"乳山"</span>, <span class="number">18</span>),(<span class="string">"金昌"</span>, <span class="number">19</span>),(<span class="string">"泉州"</span>, <span class="number">21</span>),(<span class="string">"莱西"</span>, <span class="number">21</span>),</span><br><span class="line">    (<span class="string">"日照"</span>, <span class="number">21</span>),(<span class="string">"胶南"</span>, <span class="number">22</span>),(<span class="string">"南通"</span>, <span class="number">23</span>),(<span class="string">"拉萨"</span>, <span class="number">24</span>),(<span class="string">"云浮"</span>, <span class="number">24</span>),(<span class="string">"梅州"</span>, <span class="number">25</span>),</span><br><span class="line">    (<span class="string">"文登"</span>, <span class="number">25</span>),(<span class="string">"上海"</span>, <span class="number">25</span>),(<span class="string">"攀枝花"</span>, <span class="number">25</span>),(<span class="string">"威海"</span>, <span class="number">25</span>),(<span class="string">"承德"</span>, <span class="number">25</span>),(<span class="string">"厦门"</span>, <span class="number">26</span>),</span><br><span class="line">    (<span class="string">"汕尾"</span>, <span class="number">26</span>),(<span class="string">"潮州"</span>, <span class="number">26</span>),(<span class="string">"丹东"</span>, <span class="number">27</span>),(<span class="string">"太仓"</span>, <span class="number">27</span>),(<span class="string">"曲靖"</span>, <span class="number">27</span>),(<span class="string">"烟台"</span>, <span class="number">28</span>),</span><br><span class="line">    (<span class="string">"福州"</span>, <span class="number">29</span>),(<span class="string">"瓦房店"</span>, <span class="number">30</span>),(<span class="string">"即墨"</span>, <span class="number">30</span>),(<span class="string">"抚顺"</span>, <span class="number">31</span>),(<span class="string">"玉溪"</span>, <span class="number">31</span>),(<span class="string">"张家口"</span>, <span class="number">31</span>),</span><br><span class="line">    (<span class="string">"阳泉"</span>, <span class="number">31</span>),(<span class="string">"莱州"</span>, <span class="number">32</span>),(<span class="string">"湖州"</span>, <span class="number">32</span>),(<span class="string">"汕头"</span>, <span class="number">32</span>),(<span class="string">"昆山"</span>, <span class="number">33</span>),(<span class="string">"宁波"</span>, <span class="number">33</span>),</span><br><span class="line">    (<span class="string">"湛江"</span>, <span class="number">33</span>),(<span class="string">"揭阳"</span>, <span class="number">34</span>),(<span class="string">"荣成"</span>, <span class="number">34</span>),(<span class="string">"连云港"</span>, <span class="number">35</span>),(<span class="string">"葫芦岛"</span>, <span class="number">35</span>),(<span class="string">"常熟"</span>, <span class="number">36</span>),</span><br><span class="line">    (<span class="string">"东莞"</span>, <span class="number">36</span>),(<span class="string">"河源"</span>, <span class="number">36</span>),(<span class="string">"淮安"</span>, <span class="number">36</span>),(<span class="string">"泰州"</span>, <span class="number">36</span>),(<span class="string">"南宁"</span>, <span class="number">37</span>),(<span class="string">"营口"</span>, <span class="number">37</span>),</span><br><span class="line">    (<span class="string">"惠州"</span>, <span class="number">37</span>),(<span class="string">"江阴"</span>, <span class="number">37</span>),(<span class="string">"蓬莱"</span>, <span class="number">37</span>),(<span class="string">"韶关"</span>, <span class="number">38</span>),(<span class="string">"嘉峪关"</span>, <span class="number">38</span>),(<span class="string">"广州"</span>, <span class="number">38</span>),</span><br><span class="line">    (<span class="string">"延安"</span>, <span class="number">38</span>),(<span class="string">"太原"</span>, <span class="number">39</span>),(<span class="string">"清远"</span>, <span class="number">39</span>),(<span class="string">"中山"</span>, <span class="number">39</span>),(<span class="string">"昆明"</span>, <span class="number">39</span>),(<span class="string">"寿光"</span>, <span class="number">40</span>),</span><br><span class="line">    (<span class="string">"盘锦"</span>, <span class="number">40</span>),(<span class="string">"长治"</span>, <span class="number">41</span>),(<span class="string">"深圳"</span>, <span class="number">41</span>),(<span class="string">"珠海"</span>, <span class="number">42</span>),(<span class="string">"宿迁"</span>, <span class="number">43</span>),(<span class="string">"咸阳"</span>, <span class="number">43</span>),</span><br><span class="line">    (<span class="string">"铜川"</span>, <span class="number">44</span>),(<span class="string">"平度"</span>, <span class="number">44</span>),(<span class="string">"佛山"</span>, <span class="number">44</span>),(<span class="string">"海口"</span>, <span class="number">44</span>),(<span class="string">"江门"</span>, <span class="number">45</span>),(<span class="string">"章丘"</span>, <span class="number">45</span>),</span><br><span class="line">    (<span class="string">"肇庆"</span>, <span class="number">46</span>),(<span class="string">"大连"</span>, <span class="number">47</span>),(<span class="string">"临汾"</span>, <span class="number">47</span>),(<span class="string">"吴江"</span>, <span class="number">47</span>),(<span class="string">"石嘴山"</span>, <span class="number">49</span>),(<span class="string">"沈阳"</span>, <span class="number">50</span>),</span><br><span class="line">    (<span class="string">"苏州"</span>, <span class="number">50</span>),(<span class="string">"茂名"</span>, <span class="number">50</span>),(<span class="string">"嘉兴"</span>, <span class="number">51</span>),(<span class="string">"长春"</span>, <span class="number">51</span>),(<span class="string">"胶州"</span>, <span class="number">52</span>),(<span class="string">"银川"</span>, <span class="number">52</span>),</span><br><span class="line">    (<span class="string">"张家港"</span>, <span class="number">52</span>),(<span class="string">"三门峡"</span>, <span class="number">53</span>),(<span class="string">"锦州"</span>, <span class="number">54</span>),(<span class="string">"南昌"</span>, <span class="number">54</span>),(<span class="string">"柳州"</span>, <span class="number">54</span>),(<span class="string">"三亚"</span>, <span class="number">54</span>),</span><br><span class="line">    (<span class="string">"自贡"</span>, <span class="number">56</span>),(<span class="string">"吉林"</span>, <span class="number">56</span>),(<span class="string">"阳江"</span>, <span class="number">57</span>),(<span class="string">"泸州"</span>, <span class="number">57</span>),(<span class="string">"西宁"</span>, <span class="number">57</span>),(<span class="string">"宜宾"</span>, <span class="number">58</span>),</span><br><span class="line">    (<span class="string">"呼和浩特"</span>, <span class="number">58</span>),(<span class="string">"成都"</span>, <span class="number">58</span>),(<span class="string">"大同"</span>, <span class="number">58</span>),(<span class="string">"镇江"</span>, <span class="number">59</span>),(<span class="string">"桂林"</span>, <span class="number">59</span>),(<span class="string">"张家界"</span>, <span class="number">59</span>),</span><br><span class="line">    (<span class="string">"宜兴"</span>, <span class="number">59</span>),(<span class="string">"北海"</span>, <span class="number">60</span>),(<span class="string">"西安"</span>, <span class="number">61</span>),(<span class="string">"金坛"</span>, <span class="number">62</span>),(<span class="string">"东营"</span>, <span class="number">62</span>),(<span class="string">"牡丹江"</span>, <span class="number">63</span>),</span><br><span class="line">    (<span class="string">"遵义"</span>, <span class="number">63</span>),(<span class="string">"绍兴"</span>, <span class="number">63</span>),(<span class="string">"扬州"</span>, <span class="number">64</span>),(<span class="string">"常州"</span>, <span class="number">64</span>),(<span class="string">"潍坊"</span>, <span class="number">65</span>),(<span class="string">"重庆"</span>, <span class="number">66</span>),</span><br><span class="line">    (<span class="string">"台州"</span>, <span class="number">67</span>),(<span class="string">"南京"</span>, <span class="number">67</span>),(<span class="string">"滨州"</span>, <span class="number">70</span>),(<span class="string">"贵阳"</span>, <span class="number">71</span>),(<span class="string">"无锡"</span>, <span class="number">71</span>),(<span class="string">"本溪"</span>, <span class="number">71</span>),</span><br><span class="line">    (<span class="string">"克拉玛依"</span>, <span class="number">72</span>),(<span class="string">"渭南"</span>, <span class="number">72</span>),(<span class="string">"马鞍山"</span>, <span class="number">72</span>),(<span class="string">"宝鸡"</span>, <span class="number">72</span>),(<span class="string">"焦作"</span>, <span class="number">75</span>),(<span class="string">"句容"</span>, <span class="number">75</span>),</span><br><span class="line">    (<span class="string">"北京"</span>, <span class="number">79</span>),(<span class="string">"徐州"</span>, <span class="number">79</span>),(<span class="string">"衡水"</span>, <span class="number">80</span>),(<span class="string">"包头"</span>, <span class="number">80</span>),(<span class="string">"绵阳"</span>, <span class="number">80</span>),(<span class="string">"乌鲁木齐"</span>, <span class="number">84</span>),</span><br><span class="line">    (<span class="string">"枣庄"</span>, <span class="number">84</span>),(<span class="string">"杭州"</span>, <span class="number">84</span>),(<span class="string">"淄博"</span>, <span class="number">85</span>),(<span class="string">"鞍山"</span>, <span class="number">86</span>),(<span class="string">"溧阳"</span>, <span class="number">86</span>),(<span class="string">"库尔勒"</span>, <span class="number">86</span>),</span><br><span class="line">    (<span class="string">"安阳"</span>, <span class="number">90</span>),(<span class="string">"开封"</span>, <span class="number">90</span>),(<span class="string">"济南"</span>, <span class="number">92</span>),(<span class="string">"德阳"</span>, <span class="number">93</span>),(<span class="string">"温州"</span>, <span class="number">95</span>),(<span class="string">"九江"</span>, <span class="number">96</span>),</span><br><span class="line">    (<span class="string">"邯郸"</span>, <span class="number">98</span>),(<span class="string">"临安"</span>, <span class="number">99</span>),(<span class="string">"兰州"</span>, <span class="number">99</span>),(<span class="string">"沧州"</span>, <span class="number">100</span>),(<span class="string">"临沂"</span>, <span class="number">103</span>),(<span class="string">"南充"</span>, <span class="number">104</span>),</span><br><span class="line">    (<span class="string">"天津"</span>, <span class="number">105</span>),(<span class="string">"富阳"</span>, <span class="number">106</span>),(<span class="string">"泰安"</span>, <span class="number">112</span>),(<span class="string">"诸暨"</span>, <span class="number">112</span>),(<span class="string">"郑州"</span>, <span class="number">113</span>),(<span class="string">"哈尔滨"</span>, <span class="number">114</span>),</span><br><span class="line">    (<span class="string">"聊城"</span>, <span class="number">116</span>),(<span class="string">"芜湖"</span>, <span class="number">117</span>),(<span class="string">"唐山"</span>, <span class="number">119</span>),(<span class="string">"平顶山"</span>, <span class="number">119</span>),(<span class="string">"邢台"</span>, <span class="number">119</span>),(<span class="string">"德州"</span>, <span class="number">120</span>),</span><br><span class="line">    (<span class="string">"济宁"</span>, <span class="number">120</span>),(<span class="string">"荆州"</span>, <span class="number">127</span>),(<span class="string">"宜昌"</span>, <span class="number">130</span>),(<span class="string">"义乌"</span>, <span class="number">132</span>),(<span class="string">"丽水"</span>, <span class="number">133</span>),(<span class="string">"洛阳"</span>, <span class="number">134</span>),</span><br><span class="line">    (<span class="string">"秦皇岛"</span>, <span class="number">136</span>),(<span class="string">"株洲"</span>, <span class="number">143</span>),(<span class="string">"石家庄"</span>, <span class="number">147</span>),(<span class="string">"莱芜"</span>, <span class="number">148</span>),(<span class="string">"常德"</span>, <span class="number">152</span>),(<span class="string">"保定"</span>, <span class="number">153</span>),</span><br><span class="line">    (<span class="string">"湘潭"</span>, <span class="number">154</span>),(<span class="string">"金华"</span>, <span class="number">157</span>),(<span class="string">"岳阳"</span>, <span class="number">169</span>),(<span class="string">"长沙"</span>, <span class="number">175</span>),(<span class="string">"衢州"</span>, <span class="number">177</span>),(<span class="string">"廊坊"</span>, <span class="number">193</span>),</span><br><span class="line">    (<span class="string">"菏泽"</span>, <span class="number">194</span>),(<span class="string">"合肥"</span>, <span class="number">229</span>),(<span class="string">"武汉"</span>, <span class="number">273</span>),(<span class="string">"大庆"</span>, <span class="number">279</span>)]</span><br><span class="line"></span><br><span class="line">geo = Geo(</span><br><span class="line">    <span class="string">"全国主要城市空气质量"</span>,</span><br><span class="line">    <span class="string">"data from pm2.5"</span>,</span><br><span class="line">    title_color=<span class="string">"#fff"</span>,</span><br><span class="line">    title_pos=<span class="string">"center"</span>,</span><br><span class="line">    width=<span class="number">1000</span>,</span><br><span class="line">    height=<span class="number">600</span>,</span><br><span class="line">    background_color=<span class="string">"#404a59"</span>,</span><br><span class="line">)</span><br><span class="line">attr, value = geo.cast(data)</span><br><span class="line">geo.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    attr,</span><br><span class="line">    value,</span><br><span class="line">    visual_range=[<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">    visual_text_color=<span class="string">"#fff"</span>,</span><br><span class="line">    symbol_size=<span class="number">15</span>,</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">)</span><br><span class="line">geo</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/pyecharts_img/全国主要城市空气质量.png" style="width:600px;height:340px;"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">geo = Geo(</span><br><span class="line">    <span class="string">"全国主要城市空气质量"</span>,</span><br><span class="line">    <span class="string">"data from pm2.5"</span>,</span><br><span class="line">    title_color=<span class="string">"#fff"</span>,</span><br><span class="line">    title_pos=<span class="string">"center"</span>,</span><br><span class="line">    width=<span class="number">1000</span>,</span><br><span class="line">    height=<span class="number">600</span>,</span><br><span class="line">    background_color=<span class="string">"#404a59"</span>,</span><br><span class="line">)</span><br><span class="line">attr, value = geo.cast(data)</span><br><span class="line">geo.add(</span><br><span class="line">    <span class="string">""</span>,</span><br><span class="line">    attr,</span><br><span class="line">    value,</span><br><span class="line">    type=<span class="string">"heatmap"</span>,</span><br><span class="line">    is_visualmap=<span class="keyword">True</span>,</span><br><span class="line">    visual_range=[<span class="number">0</span>, <span class="number">300</span>],</span><br><span class="line">    visual_text_color=<span class="string">"#fff"</span>,</span><br><span class="line">)</span><br><span class="line">geo</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/pyecharts_img/全国主要城市空气质量1.png" style="width:600px;height:340px;"></p>]]></content>
      
      <categories>
          
          <category> Data Aanalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拉勾网python爬虫岗位招聘信息爬取和分析</title>
      <link href="/2017/12/12/lagou/"/>
      <url>/2017/12/12/lagou/</url>
      <content type="html"><![CDATA[<p>运用requests, pandas和pyecharts模块爬取数据做一个简单的招聘信息数据分析</p><a id="more"></a><p>1.爬虫爬取拉勾网 python爬虫岗位的招聘信息(深圳地区+爬虫),并将爬取到的数据保存在csv文件中,代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">拉勾网Python职位数据爬取</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> pymysql.cursors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LagouSpider</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,city,kw)</span>:</span></span><br><span class="line">        self.baseUrl = <span class="string">'https://www.lagou.com/jobs/positionAjax.json?'</span></span><br><span class="line">        self.kw=kw</span><br><span class="line">        self.querystring = &#123;<span class="string">'px'</span>: <span class="string">'new'</span>, <span class="string">'city'</span>: city, <span class="string">'needAddtionalResult'</span>: <span class="string">'false'</span>&#125;</span><br><span class="line">        self.cookie = <span class="string">"JSESSIONID="</span> + self.get_uuid() + <span class="string">"; user_trace_token="</span> + self.get_uuid() + <span class="string">"; LGUID="</span> + self.get_uuid() + <span class="string">"; index_location_city=%E6%B7%B1%E5%9C%B3; SEARCH_ID="</span> + self.get_uuid() + <span class="string">'; _gid=GA1.2.717841549.1514043316; _ga=GA1.2.952298646.1514043316; LGSID='</span> + self.get_uuid() + <span class="string">"; LGRID="</span> + self.get_uuid() + <span class="string">"; "</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Host'</span>: <span class="string">'www.lagou.com'</span>,</span><br><span class="line">            <span class="string">'cookie'</span>: self.cookie,</span><br><span class="line">            <span class="string">'origin'</span>: <span class="string">"https://www.lagou.com"</span>,</span><br><span class="line">            <span class="string">'x-anit-forge-code'</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="string">'accept-encoding'</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">            <span class="string">'accept-language'</span>: <span class="string">"zh-CN,zh;q=0.8,en;q=0.6"</span>,</span><br><span class="line">            <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Mobile Safari/537.36"</span>,</span><br><span class="line">            <span class="string">'content-type'</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>,</span><br><span class="line">            <span class="string">'accept'</span>: <span class="string">"application/json, text/javascript, */*; q=0.01"</span>,</span><br><span class="line">            <span class="string">'referer'</span>: <span class="string">"https://www.lagou.com/jobs/list_pyhton?labelWords=&amp;fromSearch=true&amp;suginput="</span>,</span><br><span class="line">            <span class="string">'x-requested-with'</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">            <span class="string">'connection'</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">            <span class="string">'x-anit-forge-token'</span>: <span class="string">"None"</span>,</span><br><span class="line">            <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeUpBodyList</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""构造body_list"""</span></span><br><span class="line">        body_list = []</span><br><span class="line">        <span class="keyword">for</span> page_num <span class="keyword">in</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">31</span>)]:</span><br><span class="line">            body = &#123;</span><br><span class="line">                <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">                <span class="string">'pn'</span>: str(page_num),</span><br><span class="line">                <span class="string">'kd'</span>: self.kw</span><br><span class="line">            &#125;</span><br><span class="line">            body_list.append(body)</span><br><span class="line">        <span class="keyword">return</span> body_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getResp</span><span class="params">(self, body)</span>:</span></span><br><span class="line">        <span class="string">"""对一个url发送请求获取响应并返回响应内容"""</span></span><br><span class="line">        response = requests.request(<span class="string">"POST"</span>, self.baseUrl, data=body, headers=self.headers,</span><br><span class="line">                                    params=self.querystring)</span><br><span class="line">        result = response.text</span><br><span class="line">        data = json.loads(result)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content_list</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""解析html页面,xpath提取数据并返回"""</span></span><br><span class="line">        jobs_list = []</span><br><span class="line">        result_list = data[<span class="string">'content'</span>][<span class="string">'positionResult'</span>][<span class="string">'result'</span>]</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r'爬虫'</span>, result[<span class="string">'positionName'</span>]):</span><br><span class="line">                item = &#123;&#125;</span><br><span class="line">                item[<span class="string">'createTime'</span>] = self.None2str(result[<span class="string">'createTime'</span>])</span><br><span class="line">                item[<span class="string">'workYear'</span>] = self.None2str(result[<span class="string">'workYear'</span>])</span><br><span class="line">                item[<span class="string">'education'</span>] = self.None2str(result[<span class="string">'education'</span>])</span><br><span class="line">                item[<span class="string">'positionName'</span>] = self.None2str(result[<span class="string">'positionName'</span>]).replace(<span class="string">','</span>, <span class="string">'|'</span>)</span><br><span class="line">                item[<span class="string">'salary'</span>] = self.None2str(result[<span class="string">'salary'</span>])</span><br><span class="line">                item[<span class="string">'companyFullName'</span>] = self.None2str(result[<span class="string">'companyFullName'</span>])</span><br><span class="line">                item[<span class="string">'companySize'</span>] = self.None2str(result[<span class="string">'companySize'</span>])</span><br><span class="line">                item[<span class="string">'positionLables'</span>]  = <span class="string">'|'</span>.join(result[<span class="string">'positionLables'</span>])</span><br><span class="line">                item[<span class="string">'district'</span>] = self.None2str(result[<span class="string">'district'</span>])</span><br><span class="line">                item[<span class="string">'industryField'</span>] = self.None2str(result[<span class="string">'industryField'</span>]).replace(<span class="string">','</span>, <span class="string">'|'</span>)</span><br><span class="line">                item[<span class="string">'firstType'</span>] = self.None2str(result[<span class="string">'firstType'</span>])</span><br><span class="line">                item[<span class="string">'secondType'</span>] = self.None2str(result[<span class="string">'secondType'</span>])</span><br><span class="line">                item[<span class="string">'positionAdvantage'</span>] = self.None2str(result[<span class="string">'positionAdvantage'</span>]).replace(<span class="string">','</span>, <span class="string">'|'</span>)</span><br><span class="line">                item[<span class="string">'companyLabelList'</span>] = <span class="string">'|'</span>.join(result[<span class="string">'companyLabelList'</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            jobs_list.append(item)</span><br><span class="line">        <span class="keyword">return</span> jobs_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_uuid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># UUID是128位的全局唯一标识符，通常由32字节的字符串表示，它可以保证时间和空间的唯一性。</span></span><br><span class="line">        <span class="comment"># 它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。UUID主要有五个算法。</span></span><br><span class="line">        <span class="comment"># uuid4()是基于随机数</span></span><br><span class="line">        <span class="keyword">return</span> str(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">None2str</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(self, jobs_list)</span>:</span></span><br><span class="line">        <span class="comment"># 写入文档</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'lagou_python.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fw:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> jobs_list:</span><br><span class="line">                print(item)</span><br><span class="line">                fw.write(</span><br><span class="line">                    item[<span class="string">'createTime'</span>] + <span class="string">','</span> + item[<span class="string">'workYear'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'education'</span>] + <span class="string">','</span> + item[<span class="string">'positionName'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'salary'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'companyFullName'</span>] + <span class="string">','</span> + item[<span class="string">'companySize'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'positionLables'</span>] + <span class="string">','</span> + item[<span class="string">'district'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'industryField'</span>] + <span class="string">','</span> + item[<span class="string">'firstType'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'secondType'</span>] + <span class="string">','</span> + item[<span class="string">'positionAdvantage'</span>] + <span class="string">','</span> +</span><br><span class="line">                    item[<span class="string">'companyLabelList'</span>] + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PushToDB</span><span class="params">(self)</span>:</span></span><br><span class="line">        db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'admin123'</span>, db=<span class="string">'spider'</span>, charset=<span class="string">'utf8'</span>,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line">        db.autocommit(<span class="keyword">True</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        fr = open(<span class="string">'lagou_python.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fr:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            line = line.strip().split(<span class="string">','</span>)</span><br><span class="line">            print(type(line), line)</span><br><span class="line">            cursor.execute(</span><br><span class="line">                <span class="string">"insert into lagou(createTime,workYear,education,positionName,salary,companyFullName,companySize,positionLables,district,industryField,firstType,secondType,positionAdvantage,companyLabelList) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"</span>,</span><br><span class="line">                [line[<span class="number">0</span>], line[<span class="number">1</span>], line[<span class="number">2</span>], line[<span class="number">3</span>], line[<span class="number">4</span>], line[<span class="number">5</span>], line[<span class="number">6</span>], line[<span class="number">7</span>], line[<span class="number">8</span>], line[<span class="number">9</span>], line[<span class="number">10</span>],</span><br><span class="line">                 line[<span class="number">11</span>], line[<span class="number">12</span>], line[<span class="number">13</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        jobs_list = []</span><br><span class="line"></span><br><span class="line">        body_list = self.makeUpBodyList()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'lagou_python.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fw:</span><br><span class="line">            <span class="comment"># 写入一行表头说明每个字段的含义</span></span><br><span class="line">            fw.write(</span><br><span class="line">                <span class="string">'createTime,workYear,education,positionName,salary,companyFullName,companySize,positionLables,district,industryField,firstType,secondType,positionAdvantage,companyLabelList\n'</span>)</span><br><span class="line">        <span class="keyword">for</span> body <span class="keyword">in</span> body_list:</span><br><span class="line">            data = self.getResp(body)</span><br><span class="line">            jobs_list = self.get_content_list(data)</span><br><span class="line">            self.writeFile(jobs_list)</span><br><span class="line">            print(<span class="string">'=========================='</span>)</span><br><span class="line">            time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        <span class="keyword">return</span> len(jobs_list) / (<span class="number">30</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    spider = LagouSpider(<span class="string">'深圳'</span>,<span class="string">'python爬虫'</span>)</span><br><span class="line">    hitRate=spider.run()</span><br><span class="line">    <span class="comment"># PushToDB()</span></span><br></pre></td></tr></table></figure><p>2.使用jupyter notebook处理爬取到的数据,并使用统计图进行数据分析可视化展示,代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据详情</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df=pd.read_csv(<span class="string">"lagou_python2.csv"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/lagou_img/lagou_01.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 学历分布饼图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">education=pd.value_counts(df[<span class="string">'education'</span>])</span><br><span class="line">attr = education.index.tolist()</span><br><span class="line">v1=education.tolist()</span><br><span class="line">pie = Pie(<span class="string">"学历分布情况"</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, attr, v1, is_label_show=<span class="keyword">True</span>)</span><br><span class="line">pie</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/lagou_img/lagou_02.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 薪资分布图</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Grid</span><br><span class="line"></span><br><span class="line">salary=pd.value_counts(df[<span class="string">'salary'</span>])</span><br><span class="line">attr = salary.index.tolist()</span><br><span class="line">v1=salary.tolist()</span><br><span class="line"><span class="comment"># print(attr)</span></span><br><span class="line"><span class="comment"># print(v1)</span></span><br><span class="line">grid = Grid()</span><br><span class="line">bar = Bar(<span class="string">"薪资分布图"</span>)</span><br><span class="line">bar.add(<span class="string">""</span>, attr, v1, is_datazoom_show=<span class="keyword">True</span>, xaxis_interval=<span class="number">0</span>, xaxis_rotate=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 把 bar 加入到 grid 中，并适当调整 grid_bottom 参数，使 bar 图整体上移</span></span><br><span class="line">grid.add(bar, grid_bottom=<span class="string">"25%"</span>)</span><br><span class="line">grid</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/lagou_img/lagou_03.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 地区分布情况</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">district=pd.value_counts(df[<span class="string">'district'</span>])</span><br><span class="line">attr = district.index.tolist()</span><br><span class="line">v1=district.tolist()</span><br><span class="line"><span class="comment"># print(attr)</span></span><br><span class="line"><span class="comment"># print(v1)</span></span><br><span class="line">pie = Pie(<span class="string">"地区分布情况"</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, attr, v1, is_label_show=<span class="keyword">True</span>)</span><br><span class="line">pie</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/lagou_img/lagou_04.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 岗位分布情况</span></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Pie</span><br><span class="line">secondType=pd.value_counts(df[<span class="string">'secondType'</span>])</span><br><span class="line">attr = secondType.index.tolist()</span><br><span class="line">v1=secondType.tolist()</span><br><span class="line"><span class="comment"># print(attr)</span></span><br><span class="line"><span class="comment"># print(v1)</span></span><br><span class="line">pie = Pie(<span class="string">"岗位分布情况"</span>,title_pos=<span class="string">'center'</span>)</span><br><span class="line">pie.add(<span class="string">""</span>, attr, v1, is_label_show=<span class="keyword">True</span>,legend_orient=<span class="string">"vertical"</span>,legend_pos=<span class="string">"left"</span>,radius=[<span class="number">40</span>, <span class="number">75</span>],center=[<span class="number">50</span>, <span class="number">60</span>],)</span><br><span class="line">pie</span><br></pre></td></tr></table></figure><p><img src="/assets/blogImg/lagou_img/lagou_05.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http报头Accept与Content-Type的区别</title>
      <link href="/2017/11/16/http/"/>
      <url>/2017/11/16/http/</url>
      <content type="html"><![CDATA[<p>​        最近在使用Django DRF框架开发web后端HTTP接口时,发现一个以前忽略的小知识,今天有时间于是就写下来分享下.</p><p>&#160; &#160; &#160; &#160;在Django DRF框架中,  REST framework 提供了Parser解析器，在接收到请求后会自动根据<strong>Content-Type指明的请求数据类型</strong>（如JSON、表单等）将请求数据进行parse解析，解析为类字典对象保存到Request对象中。<br>REST framework还提供了Renderer 渲染器，用来根据<strong>请求头中的Accept（接收数据类型声明）</strong>来自动转换响应数据到对应格式并保存到Response响应对象中。</p><p>那么,对于HTTP请求和响应报文,Content-Type是请求头中的属性,Accept是响应头中的属性吗?</p><a id="more"></a><p>查询了相关资料,得到如下结论:</p><ol><li>Accept属于请求头， Content-Type属于实体头。</li></ol><p>Http报头分为通用报头，请求报头，响应报头和实体报头。<br>请求方的http报头结构：通用报头|请求报头|实体报头<br>响应方的http报头结构：通用报头|响应报头|实体报头</p><ol start="2"><li>Accept代表发送端（客户端）希望接受的数据类型。</li></ol><p>比如：<br>Accept：text/xml;代表客户端希望接受的数据类型是xml类型</p><ol start="3"><li>Content-Type代表发送端（客户端|服务器）发送的数据类型。</li></ol><p>比如：<br>Content-Type：text/html;代表发送端发送的数据格式是html。</p><p>二者合起来，<br>Accept:text/xml；<br>Content-Type:text/html<br>即代表希望接受的数据类型是xml格式，本次请求发送的数据的数据格式是html。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django时间数据与保存到MySQL的时间相差8小时问题</title>
      <link href="/2017/09/20/Django_mysql_datetime/"/>
      <url>/2017/09/20/Django_mysql_datetime/</url>
      <content type="html"><![CDATA[<p>最近在使用Django框架开发时,发现保存到MySQL的时间总是与实际时间相差8小时,出现的问题有如下两种:</p><p><strong>问题一:</strong></p><p>在测试使用mysql保存session时,发现保存在mysql中的session expire_time 总是与系统时间相差 8 小时</p><p><strong>问题二:</strong></p><p>创建模型类时,时间属性比如create_time通过models.DateTimeField类型,数据保存到MySQL的时间与系统时间相差8 小时</p><a id="more"></a><p><img src="/assets/blogImg/datetime.png" alt="datetime"></p><p>之前创建项目的时候 在 setting 文件中已经进行了本地化配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-Hans'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure><p>但是实际保存时间还是有时区的差异</p><p><strong>原因:</strong></p><p><strong>datetime是不包含timezone信息的,如果不需要在程序中特别处理时区（timezone-aware），在Django项目的settings.py文件中，可以直接设置为“USE_TZ = False”</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>在settings文件中设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE_TZ = <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WSGI,web服务器,web框架之间的关系</title>
      <link href="/2017/09/16/WSGI_webserver_webframwork/"/>
      <url>/2017/09/16/WSGI_webserver_webframwork/</url>
      <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;之前在学习flask框架时对于http请求在flask框架与wsgi以及web服务器之间传递和处理的流程,以及他们之间的关系一直很困惑,最近查阅了一些资料,整理出了web服务器，web框架与WSGI这三者之间的关系.</p><p>&#160; &#160; &#160; &#160;简答的说:<br>客户端从发送一个 HTTP 请求到 Flask 处理请求，分别经过了 web服务器层，WSGI层，web框架层，这三个层次。不同的层次其作用也不同，下面简要介绍各层的作用。</p><a id="more"></a><p>如图:<br><img src="/assets/blogImg/wsgi1.png" alt=""></p><p><strong>Web服务器层</strong><br>Web服务器是一类特殊的服务器，其作用是主要是接收 HTTP 请求并返回响应.</p><ol><li><p>要运行web应用，必须有 web server;比如我们熟悉的apache、nginx，或者python中的gunicorn;</p></li><li><p>在flask框架中,werkzeug模块提供了web server,即是WSGIServer，下图的黄色Server部分;</p></li></ol><p><strong>Web框架层</strong><br>&#160; &#160; &#160; &#160;Web框架的作用主要是方便我们开发 web应用程序，HTTP请求的动态数据就是由 web框架层来提供的。<br>&#160; &#160; &#160; &#160;常见的 web框架有Flask，Django等，我们以 Flask 框架为例子，展示 web框架的作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/hello&apos;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &apos;Hello World!&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, port=8080)</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;以上代码就创建了一个web应用程序对象 app。使用Web框架,并不需要关心如何接收 HTTP 请求和如何将响应结果返回给用户,只需要关心如何实现业务的逻辑即可。<br>每个Python Web应用都是一个可调用（callable）的对象。在 flask中，这个对象就是 app = Flask(name) 创建出来的 app，就是上图中的绿色Application部分;</p><p><strong>WSGI层</strong><br>&#160; &#160; &#160; &#160;<strong>WSGI</strong> 全称为 Web Server Gateway Interface,它不是服务器，只是一种<strong>接口</strong>,只适用于 Python 语言，其定义了web服务器和 web应用之间的接口规范。只要 web服务器和 web应用都遵守WSGI协议，那么 web服务器和 web应用就可以进行交互.</p><p>WSGI接口编写示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return [b&quot;Hello World&quot;]</span><br></pre></td></tr></table></figure><p>上述代码就是一个完整的 WSGI接口，application()函数就是符合WSGI标准的一个HTTP处理函数</p><p>参数说明：</p><ol><li>env是一个字典，包含了类似 HTTP_HOST，HOST_USER_AGENT，SERVER_PROTOCO 等环境变量。</li><li>start_response则是一个方法，该方法接受两个参数，分别是status，response_headers。</li></ol><p>&#160; &#160; &#160; &#160;application方法的主要作用是设置 http 响应的状态码和 Content-Type 等头部信息，并返回响应的具体结果。<br>&#160; &#160; &#160; &#160;当一个支持 WSGI的 web服务器接收到客户端的请求后，便会调用这个 application 方法，并传给它两个参数，start_response 和 application息。</p><p><strong>总结:</strong></p><p><img src="/assets/blogImg/wsgi2.png" alt=""></p><ol><li><p>WSGI将Web服务分成两个部分:服务器和应用程序。</p></li><li><p>WGSI服务器只负责与网络相关的两件事：<br>  接收浏览器的HTTP请求、向浏览器发送HTTP应答；而对HTTP请求的具体处理逻辑，则通过调用WSGI应用程序进行。</p></li></ol><p>值得指出的是，WSGI 是一种协议，需要区分几个相近的名词：<br><strong>uwsgi</strong><br>一种通讯协议，uWSGI服务器正是使用了uwsgi协议实现网络通讯</p><p><strong>uWSGI</strong><br>实现了 uwsgi 和 WSGI 两种协议的web服务器。注意 uWSGI 本质上也是一种 web服务器，处于上面描述的三层结构中的 web服务器层。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsgi </tag>
            
            <tag> Web服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx静态资源和动态资源的分离</title>
      <link href="/2017/09/16/Nginx_static_atuo/"/>
      <url>/2017/09/16/Nginx_static_atuo/</url>
      <content type="html"><![CDATA[<p>   <img src="/assets/blogImg/nginx0.jpg" alt=""></p><p>&#160; &#160; &#160; &#160;Nginx是一款<strong>高性能的http 服务器</strong>,其特点是能够支持高并发(官方测试结果为5万并发)，并且cpu、内存等资源消耗却非常低，运行非常稳定.</p><p>&#160; &#160; &#160; &#160;在web项目的中,我们经常使用nginx做<strong>分流</strong>和<strong>负载均衡</strong>.当网站的访问量达到一定程度后,为了解决并发，就可以使用nginx做负载均衡,提高网站并发量,解决性能瓶颈.<br>实际上,nginx可以<strong>实现静态资源和动态资源的分离</strong>,将静态资源交给Nginx处理，而把动态资源转发给具体的web服务器进行处理,从而提高服务器处理效率.那么,该如何实现呢?</p><a id="more"></a><p>其实就是对nginx的<strong>location</strong>进行配置了.<br>如下整理了关于配置的一些资料,分享下并作为笔记记录供以后学习和参考.</p><p>语法规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123;</span><br><span class="line">   …</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">= 开头表示精确匹配</span><br><span class="line"></span><br><span class="line">^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。</span><br><span class="line"></span><br><span class="line">~ 开头表示区分大小写的正则匹配</span><br><span class="line"></span><br><span class="line">~*  开头表示不区分大小写的正则匹配</span><br><span class="line"></span><br><span class="line">!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则</span><br><span class="line"></span><br><span class="line">/ 通用匹配，任何请求都会匹配到</span><br></pre></td></tr></table></figure><p>多个location配置的情况下匹配顺序为：</p><p>首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p><p>   <img src="/assets/blogImg/nginx_config_location.jpg" alt=""></p><p>举例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">   #规则A</span><br><span class="line">&#125;</span><br><span class="line">location = /login &#123;</span><br><span class="line">   #规则B</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">   #规则C</span><br><span class="line">&#125;</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">   #规则D</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line">   #规则E</span><br><span class="line">&#125;</span><br><span class="line">location !~ \.xhtml$ &#123;</span><br><span class="line">   #规则F</span><br><span class="line">&#125;</span><br><span class="line">location !~* \.xhtml$ &#123;</span><br><span class="line">   #规则G</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">   #规则H</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么产生的效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">访问根目录/， 比如 http://localhost/ 将匹配规则A</span><br><span class="line">访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H</span><br><span class="line">访问 http://localhost/static/a.html 将匹配规则C</span><br><span class="line">访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用</span><br><span class="line">访问 http://localhost/static/c.png 则优先匹配到规则C</span><br><span class="line">访问 http://localhost/a.PNG 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。</span><br><span class="line">访问 http://localhost/a.xhtml 不会匹配规则F和规则G</span><br><span class="line">访问 http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。</span><br><span class="line">规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</span><br></pre></td></tr></table></figure><p>实际使用中，个人觉得至少有三个匹配规则定义，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"># 第一个必选规则</span><br><span class="line">location = / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">    # 静态资源都在 static 文件夹下</span><br><span class="line">    root /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同步异步与阻塞非阻塞的区别</title>
      <link href="/2017/07/16/async_note/"/>
      <url>/2017/07/16/async_note/</url>
      <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;对于阻塞非阻塞与同步异步的关系与区别一直不是很理解,于是在网上查找了下相关资料,在此记录下,以便后面回顾学习。</p><p>“阻塞”与”非阻塞”与”同步”与“异步”不能简单的从字面理解，提供一个从分布式系统角度的回答。</p><ol><li>同步与异步</li></ol><p>&#160; &#160; &#160; &#160;同步和异步关注的是<strong>消息通信机制</strong> (synchronous communication/ asynchronous communication)<br>&#160; &#160; &#160; &#160;所谓<strong>同步</strong>，就是在发出一个<strong>调用</strong>时，在没有得到结果之前，该<strong>调用</strong>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<strong>调用者</strong>主动等待这个<strong>调用</strong>的结果。</p><a id="more"></a><p>&#160; &#160; &#160; &#160;而<strong>异步</strong>则是相反，<em>调用</em>在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<strong>调用</strong>发出后，<strong>被调用者</strong>通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p><p>典型的异步编程模型比如Node.js</p><p>举个通俗的例子：<br>&#160; &#160; &#160; &#160;你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下”，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。<br>而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。</p><ol start="2"><li>阻塞与非阻塞</li></ol><p>阻塞和非阻塞关注的是<strong>程序在等待调用结果（消息，返回值）时的状态</strong>.</p><p><strong>阻塞调用</strong>是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</p><p><strong>非阻塞调用</strong>指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p><p>还是上面的例子，<br>&#160; &#160; &#160; &#160;你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。<br>在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。</p><p>==<strong>总结:</strong>==</p><p><strong>阻塞，非阻塞</strong>：进程/线程要访问的数据是否就绪，进程/线程是否需要等待；<br><strong>同步，异步</strong>：访问数据的方式，同步需要主动读写数据，在读写数据的过程中还是会阻塞；异步只需要I/O操作完成的通知，并不主动读写数据，由操作系统内核完成数据的读写。</p><p>在处理 IO 的时候，阻塞和非阻塞都是同步 IO。<br>只有使用了特殊的 API 才是异步 IO。</p><p>   <img src="/assets/blogImg/sync_async_block_noblock1.png" alt=""><br>   <img src="/assets/blogImg/sync_async_block_noblock2.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git pull和本地文件冲突</title>
      <link href="/2017/05/25/git%20pull%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2017/05/25/git%20pull%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;在使用git pull代码时，经常会碰到有冲突的情况，提示如下信息：<br>error: Your local changes to ‘c/environ.c’ would be overwritten by merge. Aborting.Please, commit your changes or stash them before you can merge.</p><p>&#160; &#160; &#160; &#160;这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。   处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。</p><a id="more"></a><ul><li>1、先将本地修改存储起来<br>$ git stash<br>这样本地的所有修改就都被暂时存储起来 。其中stash@{0}就是刚才保存的标记。</li><li>2、pull内容<br>暂存了本地修改之后，就可以pull了。<br>$ git pull</li><li>3、还原暂存的内容<br>$ git stash pop stash@{0}<br>系统提示如下类似的信息：<br>Auto-merging c/environ.cCONFLICT (content): Merge conflict in c/environ.c<br>意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。</li><li>4、解决文件中冲突的的部分<br>&#160; &#160; &#160; &#160;打开冲突的文件，其中Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容。<br>&#160; &#160; &#160; &#160;碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。<br>解决完成之后，就可以正常的提交了。</li></ul>]]></content>
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>“钢铁牢笼”－《新教伦理与资本主义精神》有感</title>
      <link href="/2017/05/24/weber/"/>
      <url>/2017/05/24/weber/</url>
      <content type="html"><![CDATA[<p><img src="/assets/blogImg/weber.jpg" alt=""></p><p>&#160; &#160; &#160; &#160;信仰与理性之间是什么关系，可能会有很多人认为这两者之间是充满张力的对立的矛盾的两相。然而，韦伯在《新教伦理与资本主义精神》中就通过缜密的逻辑分析论证了宗教伦理与经济制度之间强烈的内在亲缘性。基督新教特有的宗教观念将“神恩蒙宠”视为一种身份，被选中的人将获得神的救赎而达到彼世，而此一身份的拥有必须证明自身的行为举止有异于“自然人”的生活方式。因此，在每位信徒身上一种以系统地讲求方法地审视自身的恩宠状态为动机的禁欲化的生活方式逐渐形成，最终导致以神的意志为导向的理性生活方式的形成。<br>&#160; &#160; &#160; &#160;这种宗教观念渗透在信徒的个人生活和伦理判断中，逐渐形成了有系统的自我检视，塑造出一套首尾一贯笼罩整体的追求秩序和方法的生活方式，最终导致个人和社会整体的理性化。这种理性化的“入世苦行”的生活方式产生了一种新的财富观：认为获取财富并不是为了此世的享乐，而是最终指向一个信仰，即他们信仰的神，以世俗劳动作为禁欲苦行的最高手段，抵制自由享乐，对抗财产的非理性消费，以致富为终极目标而追求财富，荣耀上帝以求得到神的拣选而获得救赎。而这种禁欲的强制节制最终导致资本的形成，资本主义精神也由此产生。</p><a id="more"></a><p>&#160; &#160; &#160; &#160;这种建立在特殊宗教伦理基础之上的资本主义精神的确起到了积极的推动作用，直接导致了前所未有的生产方式和经济组织方式的形成，带来极大的财富和便利。然而在纯正的宗教热潮过了巅峰时期之时，追求天国理想的奋斗开始慢慢消解成冷静的职业道德，宗教根基逐渐枯萎，被功利的现世执着取代。这种“断根”的资本主义下，“朝圣人”被“经济人”取代，形成一种独特的市民职业风格。资本主义制度的双重性、内在矛盾与悖论性暴露无疑。正如韦伯所说，“现今的资本主义经济秩序是个巨大的宇宙，个人呱呱坠地于其中，对他而言，至少作为个体，这是个他必须生活在里头的既存的、事实上如铜墙铁壁般的桎梏。这宇宙强迫个人奉行其经济行为的规范，只要个人是卷入市场关系中的话。”资本主义的强制性以如钢铁般牢笼，每个置身其中的人都无力逃脱。</p><p>&#160; &#160; &#160; &#160;正如当今我们这个时代所看到的资本主义经济秩序，这种铜墙铁壁般的桎梏，不仅仅是物质上、生存上的枷锁，也包含在资本主义发展过程中逐渐形成的价值牢笼。这种价值观溯源于书中描述的“资本主义精神”，但是其内核随着资本主义经济秩序占据了社会的主导地位之后，其宗教基础逐渐淡化，取而代之的，是一种设计的、假想的社会价值观念。能够调动社会大量资源的资产运作者，将原有资本主义的观念进行改造重组，形成一种有利于资本发展的新观念体系，借助社会这个庞大的传播系统广而告之，不断的刷新人们的三观，于潜移默化之中改变着普罗大众的价值观，让个体不仅仅在物质上受到钳制，在价值观上还受到周遭社会环境的压迫，不得不投身于资本主义经济秩序，努力成为资本所青睐的增值工具。</p><p>&#160; &#160; &#160; &#160;这种价值观导致追求资本和财富实现极大利益获取的过程被社会赋予了极大的认同。人们被新的社会观念和众人的眼光压迫着，追求更好的成绩，更高的工资，更多的财富，从而为市场经济创造更多的价值，而自身的实际追求和价值观，则在纷繁迷人的成功学概念中被淹没掉了。说到这里，我再一次想起了一部电影《Fight Club》，这部电影所表现出的对现今资本主义精神的极度厌恶正是这深处牢笼之中被奴役的人类的反思。</p><p>&#160; &#160; &#160; &#160;Advertising has its taste in cars and clothes. Working jobs we hate so we can buy shit we don’t need. We’re the middle children of history. No purpose or place. We have no great war, no great depression. Our great war’s a spiritual war. Our great depression is our lives. We’ve all been raised on television to believe that one day we’d all be millionaires and movie gods and rock stars. But we won’t. We’re slowly learning that fact. And we’re very, very pissed off.(广告诱惑我们买车子，衣服，于是拼命工作买不需要的东西，我们是被历史遗忘的一代，没有目的，没有地位，没有世界大战，没有经济大恐慌，我们的大战只是心灵之战，我们的恐慌只是我们的生活。我们从小看电视，相信有一天会成为富翁，明星或摇滚巨星，但是，我们不会。那是我们逐渐面对着的现实，所以我们非常愤怒。)</p><p>&#160; &#160; &#160; &#160;Why do guys like you and I know what a duvet is? Is this essential to our survival in the hunter-gatherer sense of the world? No. What are we, then? We’re consumers. We are by-products of a lifestyle obsession. Murder, crime, poverty…these things don’t concern me. What concerns me are celebrity magazines, television with 500 channels, some guy’s name on my underwear. Rogaine, viagra, olestra.<br>(我们一定要知道鸭绒垫子吗？我们一定要字字斟酌吗？不。那你和我算什么？我们是消费者，我们满脑子想的都是物质。我不关心凶杀案和贫穷问题，我只关心名人杂志，500个频道的电视，我内裤上印着谁的名字。生发剂，威尔钢，减肥药。)</p><p>&#160; &#160; &#160; &#160;”The things you own end up owning you.”,在表达对资本主义咆哮般的怒斥的同时,恰恰也表现出被钢铁牢笼无情禁锢却又无法逃脱其中的无奈.</p>]]></content>
      
      <categories>
          
          <category> 哲学宗教 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何将flask项目部署到阿里云服务器</title>
      <link href="/2017/04/06/public_flask/"/>
      <url>/2017/04/06/public_flask/</url>
      <content type="html"><![CDATA[<p>本文介绍如何在阿里云部署和发布项目</p><p>&#160; &#160; &#160; &#160;基于ubuntu 16.04系统，使用 Gunicorn + Nginx 进行布署，云服务器为阿里云</p><a id="more"></a><h2 id="1-购买阿里云服务器"><a href="#1-购买阿里云服务器" class="headerlink" title="1.购买阿里云服务器"></a>1.购买阿里云服务器</h2><ul><li>选择云服务器:阿里云服务器 <a href="https://www.aliyun.com" target="_blank" rel="noopener">https://www.aliyun.com</a></li><li>个人免费获取 <a href="https://free.aliyun.com/" target="_blank" rel="noopener">https://free.aliyun.com/</a><br><img src="/assets/blogImg/flask_public_img/aliyun_server.png" alt=""></li><li>创建服务器选择ubuntu16.04 64位的操作系统<br><img src="/assets/blogImg/flask_public_img/aliyun_server_ubuntu.png" alt=""></li></ul><h2 id="2-配置实例"><a href="#2-配置实例" class="headerlink" title="2.配置实例"></a>2.配置实例</h2><ol><li>进入控制台,查看实例创建情况<br><img src="/assets/blogImg/flask_public_img/instance.png" alt=""></li><li>重置root密码<br><img src="/assets/blogImg/flask_public_img/root.png" alt=""></li><li>为实例添加安全组,给安全组配置规则<br>   开放80和5000端口<br><img src="/assets/blogImg/flask_public_img/security_group.png" alt=""><br><img src="/assets/blogImg/flask_public_img/security_group2.png" alt=""></li></ol><h2 id="3-登录Linux服务器安装项目运行环境"><a href="#3-登录Linux服务器安装项目运行环境" class="headerlink" title="3.登录Linux服务器安装项目运行环境"></a>3.登录Linux服务器安装项目运行环境</h2><p>   <img src="/assets/blogImg/flask_public_img/shell.png" alt=""></p><ol><li>先更新 apt 相关源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><ol start="2"><li>mysql安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br><span class="line">apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>redis安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><ol start="4"><li>安装虚拟环境</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>使得安装的virtualenvwrapper生效，编辑~/.bashrc文件，内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">export PROJECT_HOME=$HOME/workspace</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"># 使编辑后的文件生效</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ol start="5"><li>安装flask项目依赖包</li></ol><ul><li>requirements文件</li></ul><p>&#160; &#160; &#160; &#160;flask项目中可以包含一个 requirements.txt 文件，用于记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作。</p><ul><li>在虚拟环境使用以下命令将当前虚拟环境中的依赖包以版本号生成至文件中：</li></ul><pre><code>pip freeze &gt; requirements.txt</code></pre><p>&#160; &#160; &#160; &#160;当需要创建这个虚拟环境的完全副本，可以创建一个新的虚拟环境，并在其上运行以下命令：</p><pre><code>pip install -r requirements.txt</code></pre><p>&#160; &#160; &#160; &#160;在安装 Flask-MySQLdb 的时候可能会报错，可能是依赖包没有安装，执行以下命令安装依赖包：</p><pre><code>sudo apt-get build-dep python-mysqldb</code></pre><h2 id="4-Nginx安装和配置"><a href="#4-Nginx安装和配置" class="headerlink" title="4.Nginx安装和配置"></a>4.Nginx安装和配置</h2><p>作用:实现分流、转发、负载均衡<br>   <img src="/assets/blogImg/flask_public_img/setup1.png" alt=""></p><ol><li><p>安装</p><pre><code>sudo apt-get install nginx</code></pre><p>运行及停止</p><pre><code>/etc/init.d/nginx start #启动/etc/init.d/nginx stop  #停止</code></pre></li><li><p>配置</p><p>编辑文件:</p><pre><code>/etc/nginx/sites-available/default</code></pre><p>配置并修改 location 节点下面的 proxy_pass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#多机部署需要添加下面内容</span><br><span class="line">#upstream flask &#123;</span><br><span class="line">#        server 127.0.0.1:5000;</span><br><span class="line">#        server 127.0.0.1:5001;</span><br><span class="line">#&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        # 监听80端口</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # 请求转发到gunicorn服务器</span><br><span class="line">                proxy_pass http://127.0.0.1:5000;</span><br><span class="line">                # 请求转发到多个gunicorn服务器(多机部署添加)</span><br><span class="line">                # proxy_pass http://flask;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-Gunicorn安装"><a href="#5-Gunicorn安装" class="headerlink" title="5.Gunicorn安装"></a>5.Gunicorn安装</h2><p>   <img src="/assets/blogImg/flask_public_img/setup2.png" alt=""><br>&#160; &#160; &#160; &#160;Gunicorn（绿色独角兽）是一个Python WSGI的HTTP服务器,从Ruby的独角兽（Unicorn ）项目移植,该Gunicorn服务器与各种Web框架兼容，实现非常简单，轻量级的资源消耗</p><p>Gunicorn直接用命令启动，不需要编写配置文件</p><p>安装</p><pre><code>pip install gunicorn</code></pre><p>查看选项</p><pre><code>gunicorn -h</code></pre><h2 id="6-运行项目"><a href="#6-运行项目" class="headerlink" title="6.运行项目"></a>6.运行项目</h2><pre><code>gunicorn -w 2 -b 127.0.0.1:5000 运行文件名称:Flask程序实例名-w: 表示进程（worker） -b：表示绑定ip地址和端口号（bind）</code></pre><p>OK,部署成功,快让其他人去访问一下你的网站吧~~</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lunix </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7 安装mysql后登录提示：Access denied for user &#39;root&#39;@&#39;localhost&#39;</title>
      <link href="/2017/04/01/Centos7%20%E5%AE%89%E8%A3%85mysql%E5%BC%82%E5%B8%B8/"/>
      <url>/2017/04/01/Centos7%20%E5%AE%89%E8%A3%85mysql%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;安装mysql后登录提示：ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password:yes)</p><p>解决如下：</p><ul><li>1.停止mysql服务</li></ul><p>&#160; &#160; &#160; &#160;systemctl stop mysqld.service</p><ul><li>2.修改配置文件无密码登录</li></ul><p>&#160; &#160; &#160; &#160;vim  /etc/my.cnf<br>&#160; &#160; &#160; &#160;在最后加上skip-grant-tables,保存</p><a id="more"></a><ul><li>3.启动mysql</li></ul><p>&#160; &#160; &#160; &#160;systemctl  start  mysqld.service</p><ul><li>4.登录mysql</li></ul><p>&#160; &#160; &#160; &#160;mysql -u root</p><p>&#160; &#160; &#160; &#160;注意这里不要加-p</p><ul><li>5.修改密码，mysql5.7用此语法</li></ul><p>&#160; &#160; &#160; &#160;use mysql;</p><p>&#160; &#160; &#160; &#160;update mysql.user set authentication_string=password(‘123456’) where user=’root’ ;</p><ul><li>6.回到第二部把刚加的那句删掉</li></ul><p>&#160; &#160; &#160; &#160;保存，重启mysql就可以了</p>]]></content>
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+GitHub 搭建个人博客</title>
      <link href="/2017/03/27/hexo_blog/"/>
      <url>/2017/03/27/hexo_blog/</url>
      <content type="html"><![CDATA[<h2 id="1-Hexo安装"><a href="#1-Hexo安装" class="headerlink" title="1.Hexo安装"></a>1.Hexo安装</h2><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>有对Hexo安装及使用的详细介绍,安装Hexo前需要安装Node.js和Git<br>1.Node.js</p><p> 用来生成静态页面。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>，下载v6.10.0 LTS 一路安装即可。</p><p>2.Git</p><p> 用来将本地Hexo内容提交到Github上。</p><p>3.安装Hexo</p><p> 当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p><pre><code>npm install -g hexo-cli</code></pre><a id="more"></a><ul><li>初始化<br>从cmd终端cd到一个你选定的目录，执行hexo init命令：<br>​    hexo init myblog<br>myblog是你建立的文件夹名称。cd到myblog文件夹下，执行如下命令，安装npm：<br>​      npm install</li><li><p>执行如下命令，开启hexo服务器：<br>  ​    hexo s<br>此时，浏览器中打开网址 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 能看到如下页面：</p><p> <img src="/assets/blogImg/hexo_blog_img/hexo-hello.png" alt=""></p></li></ul><p>本地设置好后，接下来开始关联Github。</p><h2 id="2-关联Github"><a href="#2-关联Github" class="headerlink" title="2.关联Github"></a>2.关联Github</h2><p>1.创建仓库</p><p>登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如luciferarmy.github.io即下图中所示：</p><p>   <img src="/assets/blogImg/hexo_blog_img/repositories.png" alt=""></p><p>2.配置myblog<br>本地的myblog文件夹下内容为：</p><pre><code>_config.ymldb.jsonnode_modulespackage.jsonscaffoldssourcethemes</code></pre><p>终端cd到myblog文件夹下，vim打开_config.yml，命令如下：</p><pre><code>vim _config.yml</code></pre><p>打开后往下滑到最后，修改成下边的样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/luciferarmy/luciferarmy.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;你需要将repository后luciferarmy换成你自己的用户名，地址在GitHub仓库获取。hexo 3.1.1版本后type:值为git。</p><p>&#160; &#160; &#160; &#160;注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错，切记 切记 切记！</p><p>在myblog文件夹目录下执行生成静态页面命令：</p><pre><code>hexo generate      或者：hexo g</code></pre><p>此时若出现如下报错：</p><pre><code>ERROR Local hexo not found in ~/blogERROR Try runing: &apos;npm install hexo --save&apos;</code></pre><p>则执行命令：</p><pre><code>npm install hexo --save</code></pre><p>若无报错，自行忽略此步骤。</p><p>再执行配置命令：</p><pre><code>hexo deploy            或者：hexo d</code></pre><p>注意：若执行命令hexo deploy<br>仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>再次执行hexo generate和hexo deploy命令。<br>若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即</p><pre><code>Username for &apos;https://github.com&apos;: GitHub用户名Password for &apos;https://github.com&apos;: GitHub密码</code></pre><p>hexo deploy 命令执行成功后，浏览器中打开网址 <a href="http://luciferarmy.github.io">http://luciferarmy.github.io</a> （将 luciferarmy 换成你的用户名）能看到和打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 时一样的页面。</p><h2 id="3-发布文章"><a href="#3-发布文章" class="headerlink" title="3.发布文章"></a>3.发布文章</h2><p>终端cd到myblog文件夹下，执行如下命令新建文章：</p><pre><code>hexo new &quot;firstArticle&quot;</code></pre><p>名为firstArticle.md的文件会建在目录/blog/source/_ posts下，firstArticle是文件名，为方便链接不建议掺杂汉字。你当然可以用vim来编辑文章。还可以用Mou、Atom编辑器，支持预览！</p><p>文章编辑完成后，终端cd到myblog文件夹下，执行如下命令来发布：</p><pre><code>hexo generate                //生成静态页面hexo deploy                 //将文章部署到Github</code></pre><p>至此，Mac上搭建基于Github的Hexo博客就完成了。下面的内容是介绍安装theme和绑定个人域名，如果有兴趣且还有耐心的话，请继续吧。</p><h2 id="4-安装Theme"><a href="#4-安装Theme" class="headerlink" title="4.安装Theme"></a>4.安装Theme</h2><p>&#160; &#160; &#160; &#160;你可以到Hexo官网主题页去搜寻自己喜欢的theme。这里以hexo-theme-next为例</p><ul><li><p>终端cd到 myblog 目录下执行如下命令：</p><p> git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p></li><li><p>将myblog目录下_config.yml里theme的名称landscape修改为next</p></li><li><p>终端cd到myblog目录下执行如下命令(每次部署文章的步骤)：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    //清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo s --debug   //debug调试模式(可在本地调试成功后发布)</span><br><span class="line">hexo g   //生成缓存和静态文件</span><br><span class="line">hexo d   //重新部署到服务器</span><br></pre></td></tr></table></figure><p>至于更改theme内容比如名称、描述、头像等去修改myblog/_ config.yml 文件和myblog/themes/next/_ config.yml 文件中对应的属性名称即可，不要忘记冒号: 后加空格。NexT 使用文档里有极详细的介绍。</p><h2 id="5-绑定个人域名"><a href="#5-绑定个人域名" class="headerlink" title="5.绑定个人域名"></a>5.绑定个人域名</h2><p>&#160; &#160; &#160; &#160;现在使用的域名是Github提供的二级域名，也可以绑定为自己的个性域名。购买域名，可以到阿里万网，可直接在其网站做域名解析。</p><p>1.Github端<br>&#160; &#160; &#160; &#160;在/myblog/themes/next/source目录下新建文件名为：CNAME文件，注意没有后缀名！直接将自己的域名如：luciferarmy.com写入。</p><p>   <img src="/assets/blogImg/hexo_blog_img/CNAME.png" alt=""></p><p>2.域名解析<br>&#160; &#160; &#160; &#160;如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。</p><ul><li><p>登录阿里云，在你购买的域名后边点击：解析 –&gt; 添加解析</p></li><li><p>记录类型：CNAME</p></li><li><p>主机记录：将域名解析为example.com（不带www），填写@或者不填写</p></li><li><p>记录值：luciferarmy.github.io. (不要忘记最后的.，luciferarmy改为你自己的用户名)，点击保存即可，如下图：</p><p><img src="/assets/blogImg/hexo_blog_img/domain.png" alt=""></p></li></ul><p>&#160; &#160; &#160; &#160;此时，点击访问<a href="http://luciferarmy.com和访问http://luciferarmy.github.io效果一致。" target="_blank" rel="noopener">http://luciferarmy.com和访问http://luciferarmy.github.io效果一致。</a></p><p>OK，大功告成！</p><p>参考链接:</p><p><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><p><a href="http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html" target="_blank" rel="noopener">Hexo+NexT 主题配置备忘</a></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/03/23/hello-world/"/>
      <url>/2017/03/23/hello-world/</url>
      <content type="html"><![CDATA[<pre><code>博客终于搭建起来了,写点小文章,欢迎大家来访~(_^^_)~</code></pre>]]></content>
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
